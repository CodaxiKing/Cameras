{"file_contents":{"App.tsx":{"content":"import React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { AuthProvider } from './src/contexts/AuthContext';\nimport { AppNavigator } from './src/navigation/AppNavigator';\n\nexport default function App() {\n  return (\n    <AuthProvider>\n      <AppNavigator />\n      <StatusBar style=\"auto\" />\n    </AuthProvider>\n  );\n}\n","size_bytes":339},"README.md":{"content":"# Pcount","size_bytes":8},"index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"replit.md":{"content":"# PCOUNT - Production Monitoring Application\n\n## Overview\n\nPCOUNT is a React Native web application built with Expo for production line monitoring and counting. The application provides a comprehensive dashboard for tracking production statistics, managing production lines, and monitoring manufacturing operations. It features real-time production data, multi-contract support, and responsive design optimized for web deployment.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Expo React Native configured for web deployment\n- **Language**: TypeScript with strict type checking\n- **Navigation**: React Navigation with bottom tabs and stack-based navigation\n- **Styling**: Styled Components with React Native for consistent theming\n- **State Management**: React Context API for authentication and global state\n- **Development Server**: Expo Metro bundler configured for port 5000\n\n### Authentication & Authorization\n- **Auth System**: Token-based authentication using JWT\n- **Secure Storage**: Expo SecureStore with localStorage fallback for web\n- **Multi-contract Support**: Users can select between multiple contracts after login\n- **Default Credentials**: Admin/Admin for development environment\n- **Session Management**: Automatic token refresh and secure token storage\n\n### Data Architecture\n- **Hybrid Data Strategy**: API-first with automatic fallback to mock data\n- **API Versioning**: Support for both V1 and V2 endpoints based on feature requirements\n- **State Management**: Custom hooks for data fetching with loading and error states\n- **Real-time Updates**: Production statistics and line status monitoring\n- **Offline Capability**: Mock data fallback ensures application functions without API\n\n### Component Architecture\n- **Styled Components**: Centralized theming system with responsive design\n- **Custom Hooks**: Reusable hooks for API calls, mock fallback, and data management\n- **Error Handling**: Comprehensive error boundaries with retry mechanisms\n- **Loading States**: Consistent loading indicators across all data-driven components\n- **Responsive Design**: Adaptive layouts for different screen sizes\n\n### Build & Deployment\n- **Development**: Hot reloading with Expo development server\n- **Production Build**: Optimized static web build using `expo export`\n- **Deployment**: Autoscale configuration for stateless web application\n- **Static Serving**: Production deployment using serve package on dynamic ports\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **Expo SDK 54**: React Native development platform with web support\n- **React 19.1.0**: Frontend framework with latest features\n- **React Navigation**: Bottom tabs and stack navigation system\n- **Styled Components**: CSS-in-JS styling solution\n\n### Production & Visualization\n- **React Native SVG**: Vector graphics for charts and visualizations\n- **Expo Linear Gradient**: Gradient backgrounds and UI elements\n- **React Native Vector Icons**: Material Design icons throughout the application\n\n### Development & Build Tools\n- **TypeScript**: Static type checking and enhanced development experience\n- **Metro Bundler**: Module bundling and development server\n- **Serve Package**: Production static file serving\n\n### Storage & Security\n- **Expo SecureStore**: Secure token storage with web fallback\n- **React Native Safe Area Context**: Safe area handling for different devices\n\n### API Integration\n- **PCount API V1**: Production data, circuits, and dashboard endpoints\n- **PCount API V2**: Authentication and user management\n- **Custom HTTP Client**: Axios-like service with automatic retry and error handling\n- **Environment Configuration**: Flexible API endpoint configuration\n\n### Mock Data System\n- **Development Fallback**: Automatic mock data when API is unavailable\n- **Production Simulation**: Realistic production line and statistics data\n- **Contract Management**: Multi-contract mock data for testing workflows","size_bytes":4019},"src/components/StyledComponents.tsx":{"content":"import styled from 'styled-components/native';\nimport { theme } from '../theme';\n\nexport const Container = styled.SafeAreaView`\n  flex: 1;\n  background-color: ${theme.colors.background};\n`;\n\nexport const CenteredContainer = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  padding: ${theme.spacing.xl}px;\n`;\n\nexport const Logo = styled.Text`\n  font-size: ${theme.fontSizes.xxlarge}px;\n  font-weight: bold;\n  color: ${theme.colors.primary};\n  margin-bottom: ${theme.spacing.xl}px;\n`;\n\nexport const Input = styled.TextInput`\n  width: 100%;\n  height: 50px;\n  border-color: ${theme.colors.border};\n  border-width: 1px;\n  border-radius: ${theme.borderRadius.md}px;\n  padding: 0 ${theme.spacing.md}px;\n  margin-bottom: ${theme.spacing.md}px;\n  background-color: ${theme.colors.white};\n  color: ${theme.colors.text};\n`;\n\nexport const Button = styled.TouchableOpacity<{ variant?: 'primary' | 'secondary' }>`\n  width: 100%;\n  height: 50px;\n  background-color: ${(props: { variant?: 'primary' | 'secondary' }) => \n    props.variant === 'secondary' ? theme.colors.surface : theme.colors.primary};\n  justify-content: center;\n  align-items: center;\n  border-radius: ${theme.borderRadius.md}px;\n  margin-top: ${theme.spacing.md}px;\n`;\n\nexport const ButtonText = styled.Text<{ variant?: 'primary' | 'secondary' }>`\n  color: ${(props: { variant?: 'primary' | 'secondary' }) => \n    props.variant === 'secondary' ? theme.colors.text : theme.colors.white};\n  font-size: ${theme.fontSizes.large}px;\n  font-weight: bold;\n`;\n\nexport const Title = styled.Text`\n  font-size: ${theme.fontSizes.xlarge}px;\n  font-weight: bold;\n  color: ${theme.colors.text};\n  text-align: center;\n  margin: ${theme.spacing.xl}px 0;\n`;\n\nexport const Card = styled.TouchableOpacity<{ backgroundColor?: string }>`\n  background-color: ${(props: { backgroundColor?: string }) => props.backgroundColor || theme.colors.white};\n  border-radius: ${theme.borderRadius.lg}px;\n  padding: ${theme.spacing.md}px;\n  margin: ${theme.spacing.sm}px 0;\n  shadow-color: ${theme.colors.shadow};\n  shadow-offset: 0px 2px;\n  shadow-opacity: 0.1;\n  shadow-radius: 8px;\n  elevation: 2;\n`;\n\nexport const StatusIndicator = styled.View<{ status: 'produzindo' | 'aguardando' | 'iniciando' }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 6px;\n  background-color: ${(props: { status: 'produzindo' | 'aguardando' | 'iniciando' }) => {\n    switch (props.status) {\n      case 'produzindo': return theme.colors.success;\n      case 'aguardando': return theme.colors.warning;\n      case 'iniciando': return theme.colors.info;\n      default: return theme.colors.textSecondary;\n    }\n  }};\n`;\n\nexport const FeaturedCard = styled.View`\n  background-color: ${theme.colors.white};\n  border-radius: ${theme.borderRadius.xl}px;\n  padding: ${theme.spacing.xl}px;\n  margin: ${theme.spacing.md}px 0;\n  border-width: 2px;\n  border-color: rgba(0, 122, 255, 0.15);\n  shadow-color: ${theme.colors.primary};\n  shadow-offset: 0px 6px;\n  shadow-opacity: 0.15;\n  shadow-radius: 12px;\n  elevation: 8;\n  position: relative;\n  overflow: hidden;\n`;\n\nexport const FeaturedCardTitle = styled.Text`\n  font-size: ${theme.fontSizes.medium}px;\n  font-weight: 600;\n  color: ${theme.colors.primary};\n  text-align: center;\n  margin-bottom: ${theme.spacing.lg}px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n`;\n\nexport const FeaturedCardValue = styled.Text`\n  font-size: 52px;\n  font-weight: 800;\n  color: ${theme.colors.text};\n  text-align: center;\n  margin-bottom: ${theme.spacing.md}px;\n  line-height: 56px;\n`;\n\nexport const FeaturedCardSubtitle = styled.Text`\n  font-size: ${theme.fontSizes.small}px;\n  color: ${theme.colors.textSecondary};\n  text-align: center;\n  font-weight: 500;\n`;\n\nexport const FeaturedCardAccent = styled.View`\n  position: absolute;\n  top: -30px;\n  right: -30px;\n  width: 100px;\n  height: 100px;\n  border-radius: 50px;\n  background-color: rgba(0, 122, 255, 0.06);\n`;\n\nexport const FeaturedCardIcon = styled.View`\n  position: absolute;\n  top: ${theme.spacing.lg}px;\n  right: ${theme.spacing.lg}px;\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  background-color: ${theme.colors.primary};\n  justify-content: center;\n  align-items: center;\n  shadow-color: ${theme.colors.primary};\n  shadow-offset: 0px 2px;\n  shadow-opacity: 0.25;\n  shadow-radius: 4px;\n  elevation: 4;\n`;","size_bytes":4332},"src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { users } from '../data/users';\nimport { contracts } from '../data/contracts';\nimport { AuthContextType, User, Contract } from '../types';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [selectedContract, setSelectedContract] = useState<Contract | null>(null);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    // Simula validação com usuário padrão Admin/Admin\n    const user = users.find(u => u.email === email && u.password === password);\n    \n    if (user) {\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      return true;\n    }\n    return false;\n  };\n\n  const selectContract = (contract: Contract) => {\n    setSelectedContract(contract);\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    setSelectedContract(null);\n    setIsAuthenticated(false);\n  };\n\n  const value: AuthContextType = {\n    isAuthenticated,\n    currentUser,\n    selectedContract,\n    login,\n    selectContract,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":1646},"src/data/contracts.ts":{"content":"import { Contract } from '../types';\n\nexport const contracts: Contract[] = [\n  {\n    id: '1',\n    name: 'Guaravita',\n    company: 'Viton',\n  },\n  {\n    id: '2',\n    name: 'Produtos ABC',\n    company: 'ABC Corp',\n  },\n];","size_bytes":219},"src/data/productionLines.ts":{"content":"import { ProductionLine } from '../types';\n\nexport const productionLines: ProductionLine[] = [\n  {\n    id: '1',\n    name: 'P1-MQA5',\n    status: 'produzindo',\n    code: '4GWL190175221',\n  },\n  {\n    id: '2',\n    name: 'P1-MQA4',\n    status: 'aguardando',\n    code: '4GWL280084334',\n  },\n  {\n    id: '3',\n    name: 'P1-MQA3',\n    status: 'produzindo',\n    code: '4GWL28009239Q',\n  },\n  {\n    id: '4',\n    name: 'P1-MQA2',\n    status: 'iniciando',\n    code: '4GWL280074571',\n  },\n  {\n    id: '5',\n    name: 'P1-MQA1',\n    status: 'produzindo',\n    code: '4GWK320052YR',\n  },\n];","size_bytes":575},"src/data/productions.ts":{"content":"import { Production, ProductionStats } from '../types';\n\nexport const productions: Production[] = [\n  {\n    id: '1',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Lwruck@guaravita.com.br',\n    startDate: '28/08/2025 - 05:48',\n    status: 'EM PRODUCAO',\n  },\n  {\n    id: '2',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Lwruck@guaravita.com.br',\n    startDate: '27/08/2025 - 05:58',\n    endDate: '28/08/2025 - 05:20',\n    status: 'FINALIZADA',\n  },\n  {\n    id: '3',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Fcorreia@guaravita.com.br',\n    startDate: '25/09/2025 - 19:51',\n    endDate: '26/09/2025 - 08:15',\n    status: 'FINALIZADA',\n  },\n];\n\nexport const productionStats: ProductionStats = {\n  operationHours: '17:25',\n  productiveHours: '14:00',\n  avgProduction: 6.5,\n  totalProduced: 4082.0,\n  hourlyProduction: [\n    { hour: '06:00', value: 0 },\n    { hour: '07:00', value: 45 },\n    { hour: '08:00', value: 98 },\n    { hour: '09:00', value: 142 },\n    { hour: '10:00', value: 178 },\n    { hour: '11:00', value: 156 },\n    { hour: '12:00', value: 89 },\n    { hour: '13:00', value: 123 },\n    { hour: '14:00', value: 198 },\n    { hour: '15:00', value: 223 },\n    { hour: '16:00', value: 267 },\n    { hour: '17:00', value: 245 },\n    { hour: '18:00', value: 189 },\n    { hour: '19:00', value: 134 },\n    { hour: '20:00', value: 98 },\n    { hour: '21:00', value: 67 },\n    { hour: '22:00', value: 34 },\n    { hour: '23:00', value: 0 },\n  ],\n};","size_bytes":1650},"src/data/users.ts":{"content":"import { User } from '../types';\n\n// Usuário padrão Admin/Admin conforme solicitado\nexport const users: User[] = [\n  {\n    id: '1', \n    email: 'Admin',\n    password: 'Admin',\n    name: 'Administrador',\n    role: 'admin',\n  },\n  {\n    id: '2',\n    email: 'operador@example.com',\n    password: 'op123',\n    name: 'Operador',\n    role: 'operator',\n  },\n];","size_bytes":355},"src/navigation/AppNavigator.tsx":{"content":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useAuth } from '../contexts/AuthContext';\nimport { LoginScreen } from '../screens/LoginScreen';\nimport { ContractScreen } from '../screens/ContractScreen';\nimport { DashboardScreen } from '../screens/DashboardScreen';\nimport { LinesScreen } from '../screens/LinesScreen';\nimport { ProductionScreen } from '../screens/ProductionScreen';\nimport { LineDetailScreen } from '../screens/LineDetailScreen';\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nconst MainTabs = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: '#007AFF',\n        tabBarInactiveTintColor: '#8E8E93',\n      }}\n    >\n      <Tab.Screen \n        name=\"Dashboard\" \n        component={DashboardScreen}\n        options={{\n          tabBarLabel: 'Dashboard',\n        }}\n      />\n      <Tab.Screen \n        name=\"Lines\" \n        component={LinesScreen}\n        options={{\n          tabBarLabel: 'Linhas',\n        }}\n      />\n      <Tab.Screen \n        name=\"Production\" \n        component={ProductionScreen}\n        options={{\n          tabBarLabel: 'Produção',\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport const AppNavigator = () => {\n  const { isAuthenticated, selectedContract } = useAuth();\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        {!isAuthenticated ? (\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n        ) : !selectedContract ? (\n          <Stack.Screen name=\"ContractScreen\" component={ContractScreen} />\n        ) : (\n          <>\n            <Stack.Screen name=\"MainTabs\" component={MainTabs} />\n            <Stack.Screen name=\"LineDetail\" component={LineDetailScreen} />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};","size_bytes":2059},"src/screens/ContractScreen.tsx":{"content":"import React from 'react';\nimport { FlatList } from 'react-native';\nimport { useAuth } from '../contexts/AuthContext';\nimport { contracts } from '../data/contracts';\nimport {\n  Container,\n  Title,\n  Card,\n  ButtonText,\n} from '../components/StyledComponents';\n\ninterface ContractScreenProps {\n  navigation: any;\n}\n\nexport const ContractScreen: React.FC<ContractScreenProps> = ({ navigation }) => {\n  const { selectContract } = useAuth();\n\n  const handleContractSelect = (contract: any) => {\n    selectContract(contract);\n    // Removido navigation.navigate - deixa o AppNavigator controlar automaticamente\n  };\n\n  return (\n    <Container style={{ padding: 16 }}>\n      <Title>Selecione o Contrato</Title>\n      \n      <FlatList\n        data={contracts}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Card onPress={() => handleContractSelect(item)}>\n            <ButtonText variant=\"secondary\">{item.name}</ButtonText>\n          </Card>\n        )}\n      />\n    </Container>\n  );\n};","size_bytes":1021},"src/screens/DashboardScreen.tsx":{"content":"import React from 'react';\nimport { View, Text, ScrollView, Dimensions } from 'react-native';\nimport { Svg, Rect, Text as SvgText, Line, G } from 'react-native-svg';\nimport { productionStats } from '../data/productions';\nimport {\n  Container,\n  Title,\n  Card,\n  FeaturedCard,\n  FeaturedCardTitle,\n  FeaturedCardValue,\n  FeaturedCardSubtitle,\n  FeaturedCardAccent,\n  FeaturedCardIcon,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\nconst { width } = Dimensions.get('window');\n\n// Componente de gráfico de barras personalizado\nconst BarChart: React.FC<{ data: Array<{ hour: string; value: number }> }> = ({ data }) => {\n  const chartWidth = width - 96;\n  const chartHeight = 200;\n  const maxValue = Math.max(...data.map(d => d.value));\n  const barWidth = (chartWidth - 80) / data.length;\n  const padding = { top: 20, right: 20, bottom: 40, left: 60 };\n\n  return (\n    <View style={{ alignItems: 'center', marginVertical: 16 }}>\n      <Svg width={chartWidth} height={chartHeight + padding.top + padding.bottom}>\n        {/* Grid lines */}\n        {[0, 1, 2, 3, 4].map((i) => {\n          const y = padding.top + (i * chartHeight) / 4;\n          const value = Math.round(maxValue - (i * maxValue) / 4);\n          return (\n            <G key={i}>\n              <Line\n                x1={padding.left}\n                y1={y}\n                x2={chartWidth - padding.right}\n                y2={y}\n                stroke={theme.colors.border}\n                strokeWidth={0.5}\n                opacity={0.5}\n              />\n              <SvgText\n                x={padding.left - 10}\n                y={y + 3}\n                fontSize=\"10\"\n                fill={theme.colors.textSecondary}\n                textAnchor=\"end\"\n              >\n                {value}\n              </SvgText>\n            </G>\n          );\n        })}\n\n        {/* Barras */}\n        {data.map((item, index) => {\n          const barHeight = (item.value / maxValue) * chartHeight;\n          const x = padding.left + index * barWidth + barWidth * 0.1;\n          const y = padding.top + chartHeight - barHeight;\n          \n          return (\n            <G key={index}>\n              <Rect\n                x={x}\n                y={y}\n                width={barWidth * 0.8}\n                height={barHeight}\n                fill={theme.colors.primary}\n                opacity={0.8}\n                rx={2}\n              />\n              <SvgText\n                x={x + (barWidth * 0.4)}\n                y={padding.top + chartHeight + 15}\n                fontSize=\"9\"\n                fill={theme.colors.textSecondary}\n                textAnchor=\"middle\"\n              >\n                {item.hour.split(':')[0]}h\n              </SvgText>\n            </G>\n          );\n        })}\n\n        {/* Eixo X */}\n        <Line\n          x1={padding.left}\n          y1={padding.top + chartHeight}\n          x2={chartWidth - padding.right}\n          y2={padding.top + chartHeight}\n          stroke={theme.colors.border}\n          strokeWidth={1}\n        />\n\n        {/* Eixo Y */}\n        <Line\n          x1={padding.left}\n          y1={padding.top}\n          x2={padding.left}\n          y2={padding.top + chartHeight}\n          stroke={theme.colors.border}\n          strokeWidth={1}\n        />\n      </Svg>\n    </View>\n  );\n};\n\nexport const DashboardScreen: React.FC = () => {\n  return (\n    <Container>\n      <ScrollView style={{ padding: 16 }}>\n        <Title>Dashboard</Title>\n        \n        <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 16 }}>\n          <Card style={{ flex: 1, marginRight: 8 }}>\n            <Text style={{ fontSize: 12, color: theme.colors.textSecondary }}>Horas</Text>\n            <Text style={{ fontSize: 16, fontWeight: 'bold', color: theme.colors.warning }}>\n              {productionStats.operationHours}\n            </Text>\n            <Text style={{ fontSize: 10 }}>Operação</Text>\n          </Card>\n          \n          <Card style={{ flex: 1, marginRight: 8 }}>\n            <Text style={{ fontSize: 12, color: theme.colors.textSecondary }}>Horas</Text>\n            <Text style={{ fontSize: 16, fontWeight: 'bold', color: theme.colors.error }}>\n              {productionStats.productiveHours}\n            </Text>\n            <Text style={{ fontSize: 10 }}>Produtivas</Text>\n          </Card>\n          \n          <Card style={{ flex: 1 }}>\n            <Text style={{ fontSize: 12, color: theme.colors.textSecondary }}>Produção</Text>\n            <Text style={{ fontSize: 16, fontWeight: 'bold', color: theme.colors.info }}>\n              {productionStats.avgProduction}\n            </Text>\n            <Text style={{ fontSize: 10 }}>Média / Hr</Text>\n          </Card>\n        </View>\n        \n        <FeaturedCard>\n          <FeaturedCardAccent />\n          <FeaturedCardIcon>\n            <Text style={{ color: theme.colors.white, fontSize: 16, fontWeight: 'bold' }}>📊</Text>\n          </FeaturedCardIcon>\n          <FeaturedCardTitle>Total Produzido</FeaturedCardTitle>\n          <FeaturedCardValue>{productionStats.totalProduced.toLocaleString()}</FeaturedCardValue>\n          <FeaturedCardSubtitle>Unidades produzidas no período</FeaturedCardSubtitle>\n        </FeaturedCard>\n        \n        <Card style={{ marginTop: 16 }}>\n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 16, color: theme.colors.text }}>TOTAL PRODUZIDO / HORA</Text>\n          <BarChart data={productionStats.hourlyProduction} />\n          <Text style={{ \n            fontSize: 11, \n            color: theme.colors.textSecondary, \n            textAlign: 'center', \n            marginTop: 8 \n          }}>\n            Unidades produzidas por horário de trabalho\n          </Text>\n        </Card>\n      </ScrollView>\n    </Container>\n  );\n};","size_bytes":5803},"src/screens/LineDetailScreen.tsx":{"content":"import React from 'react';\nimport { ScrollView, View, Text, TouchableOpacity } from 'react-native';\nimport { productions } from '../data/productions';\nimport {\n  Container,\n  Card,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\ninterface LineDetailScreenProps {\n  route: any;\n  navigation: any;\n}\n\nexport const LineDetailScreen: React.FC<LineDetailScreenProps> = ({ route, navigation }) => {\n  const { line } = route.params;\n  \n  // Filtrar produções da linha específica\n  const lineProductions = productions.filter(prod => prod.lineId === line.id);\n  const activeProductions = lineProductions.filter(prod => prod.status === 'EM PRODUCAO');\n  const finishedProductions = lineProductions.filter(prod => prod.status === 'FINALIZADA');\n\n  const ProductionItem = ({ production }: { production: any }) => (\n    <Card style={{ marginBottom: 8 }}>\n      <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <View style={{ flex: 1 }}>\n          <View style={{ \n            backgroundColor: production.status === 'EM PRODUCAO' ? theme.colors.success : theme.colors.textSecondary,\n            paddingHorizontal: 8,\n            paddingVertical: 4,\n            borderRadius: 4,\n            alignSelf: 'flex-start',\n            marginBottom: 8\n          }}>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 12,\n              fontWeight: 'bold'\n            }}>\n              {line.name}\n            </Text>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 10\n            }}>\n              {production.status}\n            </Text>\n          </View>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Código: <Text style={{ fontWeight: 'normal' }}>{production.productCode}</Text>\n          </Text>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Produto: <Text style={{ fontWeight: 'normal' }}>{production.productName}</Text>\n          </Text>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Técnico: <Text style={{ fontWeight: 'normal' }}>{production.technician}</Text>\n          </Text>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Data início: <Text style={{ fontWeight: 'normal' }}>{production.startDate}</Text>\n          </Text>\n          \n          {production.endDate && (\n            <Text style={{ fontSize: 14, fontWeight: 'bold' }}>\n              Data final: <Text style={{ fontWeight: 'normal' }}>{production.endDate}</Text>\n            </Text>\n          )}\n        </View>\n        \n        <TouchableOpacity>\n          <Text style={{ fontSize: 18, color: theme.colors.primary }}>→</Text>\n        </TouchableOpacity>\n      </View>\n    </Card>\n  );\n\n  return (\n    <Container>\n      {/* Header */}\n      <View style={{ \n        backgroundColor: theme.colors.primary,\n        paddingHorizontal: 16,\n        paddingVertical: 20,\n        paddingTop: 50\n      }}>\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <TouchableOpacity onPress={() => navigation.goBack()}>\n            <Text style={{ color: theme.colors.white, fontSize: 18, marginRight: 16 }}>←</Text>\n          </TouchableOpacity>\n          <View>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 18,\n              fontWeight: 'bold'\n            }}>\n              Produção de linha\n            </Text>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 16\n            }}>\n              {line.name} {line.company || 'Guaravita'}\n            </Text>\n          </View>\n        </View>\n      </View>\n\n      <ScrollView style={{ padding: 16 }}>\n        {/* Produção Ativa */}\n        {activeProductions.length > 0 && (\n          <View style={{ marginBottom: 24 }}>\n            <Text style={{ \n              fontSize: 16,\n              fontWeight: 'bold',\n              marginBottom: 12,\n              color: theme.colors.text\n            }}>\n              EM PRODUÇÃO\n            </Text>\n            {activeProductions.map((production) => (\n              <ProductionItem key={production.id} production={production} />\n            ))}\n          </View>\n        )}\n\n        {/* Produções Finalizadas */}\n        {finishedProductions.length > 0 && (\n          <View>\n            <Text style={{ \n              fontSize: 16,\n              fontWeight: 'bold',\n              marginBottom: 12,\n              color: theme.colors.text\n            }}>\n              FINALIZADAS\n            </Text>\n            {finishedProductions.map((production) => (\n              <ProductionItem key={production.id} production={production} />\n            ))}\n          </View>\n        )}\n\n        {/* Caso não tenha produções */}\n        {lineProductions.length === 0 && (\n          <View style={{ \n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            paddingTop: 100\n          }}>\n            <Text style={{ \n              fontSize: 16,\n              color: theme.colors.textSecondary,\n              textAlign: 'center'\n            }}>\n              Nenhuma produção encontrada para esta linha\n            </Text>\n          </View>\n        )}\n      </ScrollView>\n    </Container>\n  );\n};","size_bytes":5487},"src/screens/LinesScreen.tsx":{"content":"import React from 'react';\nimport { FlatList, View, Text } from 'react-native';\nimport { productionLines } from '../data/productionLines';\nimport {\n  Container,\n  Title,\n  Card,\n  StatusIndicator,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\ninterface LinesScreenProps {\n  navigation: any;\n}\n\nexport const LinesScreen: React.FC<LinesScreenProps> = ({ navigation }) => {\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'produzindo': return 'Produzindo';\n      case 'aguardando': return 'Aguardando';\n      case 'iniciando': return 'Iniciando';\n      default: return status;\n    }\n  };\n\n  return (\n    <Container style={{ padding: 16 }}>\n      <Title>Selecione uma Linha</Title>\n      \n      <View style={{ flexDirection: 'row', marginBottom: 16, alignItems: 'center' }}>\n        <StatusIndicator status=\"iniciando\" />\n        <Text style={{ marginLeft: 8, marginRight: 16 }}>Iniciando</Text>\n        <StatusIndicator status=\"aguardando\" />\n        <Text style={{ marginLeft: 8, marginRight: 16 }}>Aguardando</Text>\n        <StatusIndicator status=\"produzindo\" />\n        <Text style={{ marginLeft: 8 }}>Produzindo</Text>\n      </View>\n      \n      <FlatList\n        data={productionLines}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Card onPress={() => navigation.navigate('LineDetail', { line: item })}>\n            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <StatusIndicator status={item.status} />\n                <View style={{ marginLeft: 16 }}>\n                  <Text style={{ \n                    fontSize: 16, \n                    fontWeight: 'bold', \n                    color: theme.colors.white,\n                    backgroundColor: theme.colors.success,\n                    paddingHorizontal: 8,\n                    paddingVertical: 4,\n                    borderRadius: 4\n                  }}>\n                    {item.name}\n                  </Text>\n                  <Text style={{ fontSize: 14, marginTop: 4 }}>{item.code}</Text>\n                </View>\n              </View>\n              <Text style={{ fontSize: 16 }}>→</Text>\n            </View>\n          </Card>\n        )}\n      />\n    </Container>\n  );\n};","size_bytes":2380},"src/screens/LoginScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { Alert, Text } from 'react-native';\nimport { useAuth } from '../contexts/AuthContext';\nimport {\n  Container,\n  CenteredContainer,\n  Logo,\n  Input,\n  Button,\n  ButtonText,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\ninterface LoginScreenProps {\n  navigation: any;\n}\n\nexport const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { login } = useAuth();\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      Alert.alert('Erro', 'Por favor, preencha todos os campos');\n      return;\n    }\n\n    const success = await login(email, password);\n    if (!success) {\n      Alert.alert('Erro', 'Credenciais inválidas');\n    }\n    // Removido navigation.navigate - deixa o AppNavigator controlar automaticamente\n  };\n\n  return (\n    <Container>\n      <CenteredContainer>\n        <Logo>PCOUNT</Logo>\n        \n        <Input\n          placeholder=\"Digite seu e-mail\"\n          value={email}\n          onChangeText={setEmail}\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n        />\n        \n        <Input\n          placeholder=\"Digite sua senha\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry\n        />\n        \n        <Button onPress={handleLogin}>\n          <ButtonText>Entrar</ButtonText>\n        </Button>\n        \n        <Text style={{ \n          fontSize: theme.fontSizes.small,\n          color: theme.colors.textSecondary,\n          textAlign: 'center',\n          marginTop: theme.spacing.md\n        }}>\n          Usuário padrão: Admin | Senha: Admin\n        </Text>\n      </CenteredContainer>\n    </Container>\n  );\n};","size_bytes":1799},"src/screens/ProductionScreen.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  Container,\n  CenteredContainer,\n  Title,\n  Button,\n  ButtonText,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\nexport const ProductionScreen: React.FC = () => {\n  return (\n    <Container>\n      <CenteredContainer>\n        <View style={{ alignItems: 'center' }}>\n          <Text style={{ fontSize: 24, marginBottom: 16 }}>📷</Text>\n          <Text style={{ \n            fontSize: 20, \n            fontWeight: 'bold', \n            backgroundColor: theme.colors.primary,\n            color: theme.colors.white,\n            paddingHorizontal: 12,\n            paddingVertical: 6,\n            borderRadius: 8\n          }}>\n            SCAN ME!\n          </Text>\n        </View>\n        \n        <Title>Selecione uma Produção</Title>\n        \n        <Text style={{ \n          textAlign: 'center', \n          color: theme.colors.text,\n          fontSize: 16,\n          marginBottom: 32\n        }}>\n          Não há produção aberta para o dispositivo\n        </Text>\n        \n        <Button>\n          <ButtonText>📱 Escanear QR Code</ButtonText>\n        </Button>\n      </CenteredContainer>\n    </Container>\n  );\n};","size_bytes":1229},"src/theme/index.ts":{"content":"export interface Theme {\n  colors: {\n    primary: string;\n    background: string;\n    surface: string;\n    text: string;\n    textSecondary: string;\n    border: string;\n    success: string;\n    warning: string;\n    error: string;\n    info: string;\n    white: string;\n    shadow: string;\n  };\n  fonts: {\n    regular: string;\n    medium: string;\n    bold: string;\n  };\n  fontSizes: {\n    small: number;\n    medium: number;\n    large: number;\n    xlarge: number;\n    xxlarge: number;\n  };\n  spacing: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    xxl: number;\n  };\n  borderRadius: {\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n  };\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport const theme: Theme = {\n  colors: {\n    primary: '#007AFF',\n    background: '#FFFFFF',\n    surface: '#F2F2F7',\n    text: '#1C1C1E',\n    textSecondary: '#8E8E93',\n    border: '#E5E5EA',\n    success: '#34C759',\n    warning: '#FF9500',\n    error: '#FF3B30',\n    info: '#5AC8FA',\n    white: '#FFFFFF',\n    shadow: '#000000',\n  },\n  fonts: {\n    regular: 'System',\n    medium: 'System',\n    bold: 'System',\n  },\n  fontSizes: {\n    small: 12,\n    medium: 14,\n    large: 16,\n    xlarge: 20,\n    xxlarge: 24,\n  },\n  spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n    xxl: 48,\n  },\n  borderRadius: {\n    sm: 4,\n    md: 8,\n    lg: 12,\n    xl: 16,\n  },\n  shadows: {\n    sm: '0px 1px 2px rgba(0, 0, 0, 0.05)',\n    md: '0px 2px 8px rgba(0, 0, 0, 0.1)',\n    lg: '0px 4px 16px rgba(0, 0, 0, 0.15)',\n  },\n};","size_bytes":1575},"src/types/index.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  password: string;\n  name: string;\n  role: 'admin' | 'operator';\n}\n\nexport interface Contract {\n  id: string;\n  name: string;\n  company: string;\n}\n\nexport interface ProductionLine {\n  id: string;\n  name: string;\n  status: 'produzindo' | 'aguardando' | 'iniciando';\n  code: string;\n}\n\nexport interface Production {\n  id: string;\n  lineId: string;\n  productCode: string;\n  productName: string;\n  technician: string;\n  startDate: string;\n  endDate?: string;\n  status: 'EM PRODUCAO' | 'FINALIZADA';\n}\n\nexport interface ProductionStats {\n  operationHours: string;\n  productiveHours: string;\n  avgProduction: number;\n  totalProduced: number;\n  hourlyProduction: Array<{ hour: string; value: number }>;\n}\n\nexport interface AuthContextType {\n  isAuthenticated: boolean;\n  currentUser: User | null;\n  selectedContract: Contract | null;\n  login: (email: string, password: string) => Promise<boolean>;\n  selectContract: (contract: Contract) => void;\n  logout: () => void;\n}","size_bytes":1018},"docs/replit.md":{"content":"# PCOUNT - Production Monitoring Application\n\n## Overview\nPCOUNT is a React Native web application built with Expo for production line monitoring and counting. The application provides a dashboard for tracking production statistics, managing production lines, and monitoring production data.\n\n## Project Architecture\n- **Framework**: Expo React Native (configured for web)\n- **Language**: TypeScript\n- **Navigation**: React Navigation with bottom tabs and stack navigation\n- **Styling**: Styled Components with React Native\n- **State Management**: React Context API for authentication\n- **Development Server**: Expo Metro bundler on port 5000\n\n## Recent Changes (September 15, 2025)\n1. Fixed TypeScript configuration to support JSX compilation\n2. Configured development workflow for Expo web on port 5000\n3. Set up deployment configuration for production (autoscale)\n4. Added serve package for production static file serving\n5. Verified application runs correctly in Replit environment\n\n## Application Features\n- **Authentication**: Login system with Admin/Admin default credentials\n- **Dashboard**: Production statistics and metrics display\n- **Production Lines**: Management and monitoring of production lines\n- **Contract Management**: Multi-contract support with selection flow\n- **Responsive Design**: Optimized for web deployment\n\n## Development Setup\n- Development server runs on port 5000 using `npx expo start --web --port 5000`\n- TypeScript configuration supports JSX with react-jsx transform\n- Metro bundler handles module resolution and bundling\n- Application uses React Native Web for web compatibility\n\n## Deployment Configuration\n- **Target**: Autoscale (stateless web application)\n- **Build**: `npx expo export --platform web` (creates optimized build)\n- **Run**: `npx serve -s dist -l $PORT` (serves static files on dynamic port)\n- **Dependencies**: serve package installed for production deployment\n\n## User Preferences\n- Default login credentials: Admin/Admin\n- Portuguese language interface\n- Production-focused UI design\n- Tab-based navigation for main features\n\n## File Structure\n- `/src/screens/`: Application screens (Login, Dashboard, Production, etc.)\n- `/src/components/`: Reusable styled components\n- `/src/contexts/`: React Context providers (Auth)\n- `/src/data/`: Mock data for users, contracts, production lines\n- `/src/navigation/`: React Navigation configuration\n- `/src/types/`: TypeScript type definitions\n- `/assets/`: Application icons and images","size_bytes":2483},"pcount/API_SETUP.md":{"content":"# Configuração da API - PCOUNT\n\n## Visão Geral\n\n\n- 🔌 **Com API**: Usa dados reais do backend quando disponível\n- 📱 **Sem API**: Usa dados mock automaticamente como fallback\n\n## Estrutura Criada\n\n### Serviços API\n```\nsrc/services/\n├── api.ts              # Serviço base para HTTP requests\n├── authService.ts      # Autenticação e login\n├── contractService.ts  # Gestão de contratos  \n├── productionLineService.ts # Linhas de produção\n└── productionService.ts     # Produções e estatísticas\n```\n\n### Hooks Personalizados\n```\nsrc/hooks/\n├── useApi.ts          # Hook genérico para chamadas API\n└── useProductions.ts  # Hooks específicos para produção\n```\n\n### Componentes de UI\n```\nsrc/components/\n├── LoadingSpinner.tsx # Indicador de carregamento\n└── ErrorMessage.tsx   # Mensagens de erro com retry\n```\n\n## Configuração\n\n### 1. Variáveis de Ambiente\n\nCopie o arquivo `.env.example` para `.env`:\n\n```bash\ncp .env.example .env\n```\n\nConfigure sua URL da API no `.env`:\n\n```env\nEXPO_PUBLIC_API_URL=https://sua-api.com/api\n```\n\n### 2. Estrutura da API Esperada\n\n#### Autenticação\n```\nPOST /api/auth/login\n{\n  \"email\": \"string\",\n  \"password\": \"string\"\n}\n→ { \"user\": {...}, \"token\": \"...\" }\n\nGET /api/auth/me\n→ { \"user\": {...} }\n\nPOST /api/auth/logout\n```\n\n#### Contratos\n```\nGET /api/contracts\n→ { \"contracts\": [...] }\n\nGET /api/contracts/:id\n→ { \"contract\": {...} }\n```\n\n#### Linhas de Produção\n```\nGET /api/production-lines\n→ { \"lines\": [...] }\n\nGET /api/production-lines?contractId=123\n→ { \"lines\": [...] }\n\nPUT /api/production-lines/:id/status\n{ \"status\": \"produzindo\" | \"aguardando\" | \"iniciando\" }\n```\n\n#### Produções\n```\nGET /api/productions\n→ { \"productions\": [...] }\n\nGET /api/productions/stats\n→ { \"stats\": {...} }\n\nPOST /api/productions\n{ ...dadosProducao }\n```\n\n## Como Usar\n\n### Autenticação com API\n```typescript\nconst { login, loading, error } = useAuth();\n\nconst handleLogin = async () => {\n  const success = await login(email, password);\n  // Automatically falls back to mock data if API fails\n};\n```\n\n### Dados de Produção\n```typescript\nimport { useProductions, useProductionLines } from '../hooks/useProductions';\n\nfunction MyComponent() {\n  const { data: productions, loading, error } = useProductions();\n  const { data: lines } = useProductionLines(contractId);\n  \n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  \n  return <ProductionList data={productions} />;\n}\n```\n\n### Operações Manuais\n```typescript\nimport { useProductionOperations } from '../hooks/useProductions';\n\nfunction ProductionControl() {\n  const { createProduction, loading } = useProductionOperations();\n  \n  const handleCreate = async () => {\n    await createProduction({\n      lineId: '1',\n      productCode: 'ABC123',\n      // ...outros dados\n    });\n  };\n}\n```\n\n## Fallback Automático\n\nA aplicação continua funcionando **normalmente** mesmo sem API:\n\n1. ✅ **Login**: Usa credenciais mock (Admin/Admin)\n2. ✅ **Contratos**: Dados estáticos predefinidos  \n3. ✅ **Produções**: Estatísticas de exemplo\n4. ✅ **Interface**: Sem mudanças visuais\n\n## Estados de Loading\n\nTodas as telas agora mostram:\n\n- 🔄 **Loading**: Spinner durante carregamento\n- ❌ **Erro**: Mensagem com botão \"Tentar novamente\"\n- ✅ **Sucesso**: Dados carregados normalmente\n\n## Testando\n\n### Desenvolvimento Local\n1. Inicie sem backend → Usa dados mock\n2. Configure API_URL → Tenta conectar na API\n3. API indisponível → Volta para mock automaticamente\n\n### Com Backend Real\n1. Configure `EXPO_PUBLIC_API_URL`\n2. Implemente os endpoints listados acima\n3. A aplicação conectará automaticamente\n\n## Próximos Passos\n\n1. **Backend**: Implemente os endpoints da API\n2. **Autenticação**: Configure JWT/tokens se necessário\n3. **Websockets**: Para dados em tempo real (opcional)\n4. **Cache**: Implementar cache local se necessário","size_bytes":3969},"pcount/App.tsx":{"content":"import React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { AuthProvider } from './src/contexts/AuthContext';\nimport { AppNavigator } from './src/navigation/AppNavigator';\n\nexport default function App() {\n  return (\n    <AuthProvider>\n      <AppNavigator />\n      <StatusBar style=\"auto\" />\n    </AuthProvider>\n  );\n}\n","size_bytes":339},"pcount/README.md":{"content":"# PCOUNT - Sistema de Monitoramento de Produção\n\nAplicação React Native construída com Expo para monitoramento e contagem de linhas de produção.\n\n## Características\n\n- **Autenticação**: Sistema de login com credenciais Admin/Admin\n- **Dashboard**: Estatísticas e métricas de produção\n- **Linhas de Produção**: Gerenciamento e monitoramento de linhas\n- **Contratos**: Suporte multi-contrato com fluxo de seleção\n- **Design Responsivo**: Otimizado para deployment web\n\n## Tecnologias\n\n- Expo React Native para desenvolvimento cross-platform\n- TypeScript para tipagem estática\n- React Navigation para navegação\n- Styled Components para estilização\n- React Context API para gerenciamento de estado\n\n## Desenvolvimento\n\n```bash\n# Instalar dependências\nnpm install\n\n# Executar em modo desenvolvimento\nnpm run web\n\n# Build para produção\nnpm run build:web\n```\n\n## Estrutura do Projeto\n\n- `src/` - Código fonte da aplicação\n- `assets/` - Assets da aplicação (ícones, imagens)\n- `docs/` - Documentação específica do ambiente de desenvolvimento\n\n---","size_bytes":1073},"pcount/index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"pcount/metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.server = {\n  ...config.server,\n  allowedHosts: 'all',\n};\n\nmodule.exports = config;","size_bytes":194},"pcount/src/components/CustomHeader.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity, Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { theme } from '../theme';\n\ninterface CustomHeaderProps {\n  title?: string;\n  showBackButton?: boolean;\n}\n\nexport const CustomHeader: React.FC<CustomHeaderProps> = ({ \n  title, \n  showBackButton = false \n}) => {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{\n      backgroundColor: theme.colors.primary,\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      paddingTop: 50,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative'\n    }}>\n      {showBackButton && (\n        <TouchableOpacity \n          onPress={() => navigation.goBack()}\n          style={{ \n            position: 'absolute', \n            left: 12, \n            top: 58,\n            zIndex: 1,\n            backgroundColor: 'rgba(255, 255, 255, 0.15)',\n            borderRadius: 12,\n            paddingHorizontal: 14,\n            paddingVertical: 10,\n            borderWidth: 1.5,\n            borderColor: 'rgba(255, 255, 255, 0.3)',\n            elevation: 2,\n            // Web shadow using boxShadow\n            ...Platform.select({\n              web: {\n                boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',\n              },\n              default: {\n                shadowColor: theme.colors.shadow,\n                shadowOffset: { width: 0, height: 2 },\n                shadowOpacity: 0.1,\n                shadowRadius: 3,\n              }\n            }),\n          }}\n          activeOpacity={0.7}\n          accessibilityLabel=\"Voltar\"\n          accessibilityRole=\"button\"\n        >\n          <View style={{ \n            flexDirection: 'row', \n            alignItems: 'center', \n            justifyContent: 'center' \n          }}>\n            <MaterialIcons \n              name=\"arrow-back\" \n              size={18} \n              color={theme.colors.white}\n              style={{ marginRight: 6 }}\n            />\n            <Text style={{ \n              color: theme.colors.white, \n              fontSize: 15, \n              fontWeight: '600',\n              opacity: 0.95 \n            }}>\n              Voltar\n            </Text>\n          </View>\n        </TouchableOpacity>\n      )}\n      \n      <View style={{ alignItems: 'center' }}>\n        <Text style={{\n          color: theme.colors.white,\n          fontSize: 20,\n          fontWeight: 'bold'\n        }}>\n          PCOUNT\n        </Text>\n        {title && (\n          <Text style={{\n            color: theme.colors.white,\n            fontSize: 14,\n            opacity: 0.9\n          }}>\n            {title}\n          </Text>\n        )}\n      </View>\n    </View>\n  );\n};","size_bytes":2808},"pcount/src/components/ErrorMessage.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { theme } from '../theme';\n\ninterface ErrorMessageProps {\n  message: string;\n  onRetry?: () => void;\n  retryText?: string;\n}\n\nexport const ErrorMessage: React.FC<ErrorMessageProps> = ({\n  message,\n  onRetry,\n  retryText = 'Tentar novamente',\n}) => {\n  return (\n    <View style={{\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 20,\n    }}>\n      <Text style={{\n        fontSize: 18,\n        color: theme.colors.error,\n        textAlign: 'center',\n        marginBottom: 16,\n      }}>\n        ⚠️ Erro\n      </Text>\n      \n      <Text style={{\n        fontSize: 16,\n        color: theme.colors.text,\n        textAlign: 'center',\n        marginBottom: 24,\n        lineHeight: 22,\n      }}>\n        {message}\n      </Text>\n      \n      {onRetry && (\n        <TouchableOpacity\n          onPress={onRetry}\n          style={{\n            backgroundColor: theme.colors.primary,\n            paddingHorizontal: 24,\n            paddingVertical: 12,\n            borderRadius: 8,\n          }}\n        >\n          <Text style={{\n            color: theme.colors.white,\n            fontSize: 16,\n            fontWeight: '600',\n          }}>\n            {retryText}\n          </Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};","size_bytes":1363},"pcount/src/components/LoadingSpinner.tsx":{"content":"import React from 'react';\nimport { View, Text, ActivityIndicator } from 'react-native';\nimport { theme } from '../theme';\n\ninterface LoadingSpinnerProps {\n  message?: string;\n  size?: 'small' | 'large';\n  color?: string;\n}\n\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\n  message = 'Carregando...',\n  size = 'large',\n  color = theme.colors.primary,\n}) => {\n  return (\n    <View style={{\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 20,\n    }}>\n      <ActivityIndicator size={size} color={color} />\n      {message && (\n        <Text style={{\n          marginTop: 16,\n          fontSize: 16,\n          color: theme.colors.text,\n          textAlign: 'center',\n        }}>\n          {message}\n        </Text>\n      )}\n    </View>\n  );\n};","size_bytes":797},"pcount/src/components/StyledComponents.tsx":{"content":"import styled from 'styled-components/native';\nimport { theme } from '../theme';\n\nexport const Container = styled.SafeAreaView`\n  flex: 1;\n  background-color: ${theme.colors.background};\n`;\n\nexport const CenteredContainer = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  padding: ${theme.spacing.xl}px;\n`;\n\nexport const Logo = styled.Text`\n  font-size: ${theme.fontSizes['4xl']}px;\n  font-weight: 800;\n  color: ${theme.colors.primary};\n  margin-bottom: ${theme.spacing.xl}px;\n  text-align: center;\n  letter-spacing: -1px;\n`;\n\nexport const Input = styled.TextInput`\n  width: 100%;\n  height: 56px;\n  border-color: ${theme.colors.border};\n  border-width: 1px;\n  border-radius: ${theme.borderRadius.xl}px;\n  padding: 0 ${theme.spacing.lg}px;\n  margin-bottom: ${theme.spacing.md}px;\n  background-color: ${theme.colors.surfaceElevated};\n  color: ${theme.colors.text};\n  font-size: ${theme.fontSizes.base}px;\n  shadow-color: ${theme.colors.shadow};\n  shadow-offset: 0px 2px;\n  shadow-opacity: 0.08;\n  shadow-radius: 8px;\n  elevation: 2;\n`;\n\nexport const Button = styled.TouchableOpacity<{ variant?: 'primary' | 'secondary' }>`\n  width: 100%;\n  height: 56px;\n  background-color: ${(props: { variant?: 'primary' | 'secondary' }) => \n    props.variant === 'secondary' ? theme.colors.surfaceSecondary : theme.colors.primary};\n  justify-content: center;\n  align-items: center;\n  border-radius: ${theme.borderRadius.xl}px;\n  margin-top: ${theme.spacing.md}px;\n  shadow-color: ${theme.colors.primary};\n  shadow-offset: 0px 4px;\n  shadow-opacity: 0.25;\n  shadow-radius: 12px;\n  elevation: 6;\n`;\n\nexport const ButtonText = styled.Text<{ variant?: 'primary' | 'secondary' }>`\n  color: ${(props: { variant?: 'primary' | 'secondary' }) => \n    props.variant === 'secondary' ? theme.colors.text : theme.colors.textInverse};\n  font-size: ${theme.fontSizes.lg}px;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n`;\n\nexport const Title = styled.Text`\n  font-size: ${theme.fontSizes.xl}px;\n  font-weight: 700;\n  color: ${theme.colors.text};\n  text-align: center;\n  margin: ${theme.spacing.xl}px 0;\n  letter-spacing: -0.5px;\n`;\n\nexport const Card = styled.TouchableOpacity<{ backgroundColor?: string }>`\n  background-color: ${(props: { backgroundColor?: string }) => props.backgroundColor || theme.colors.surfaceElevated};\n  border-radius: ${theme.borderRadius['2xl']}px;\n  padding: ${theme.spacing.lg}px;\n  margin: ${theme.spacing.sm}px 0;\n  border-width: 1px;\n  border-color: ${theme.colors.borderLight};\n  shadow-color: ${theme.colors.shadow};\n  shadow-offset: 0px 4px;\n  shadow-opacity: 0.12;\n  shadow-radius: 16px;\n  elevation: 4;\n`;\n\nexport const StatusIndicator = styled.View<{ status: 'produzindo' | 'aguardando' | 'iniciando' }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 6px;\n  background-color: ${(props: { status: 'produzindo' | 'aguardando' | 'iniciando' }) => {\n    switch (props.status) {\n      case 'produzindo': return theme.colors.success;\n      case 'aguardando': return theme.colors.warning;\n      case 'iniciando': return theme.colors.info;\n      default: return theme.colors.textSecondary;\n    }\n  }};\n`;\n\nexport const FeaturedCard = styled.View`\n  background-color: ${theme.colors.surfaceElevated};\n  border-radius: ${theme.borderRadius['2xl']}px;\n  padding: ${theme.spacing.xl}px;\n  margin: ${theme.spacing.md}px 0;\n  border-width: 1px;\n  border-color: ${theme.colors.borderLight};\n  shadow-color: ${theme.colors.primary};\n  shadow-offset: 0px 8px;\n  shadow-opacity: 0.2;\n  shadow-radius: 24px;\n  elevation: 12;\n  position: relative;\n  overflow: hidden;\n`;\n\nexport const FeaturedCardTitle = styled.Text`\n  font-size: ${theme.fontSizes.sm}px;\n  font-weight: 600;\n  color: ${theme.colors.primary};\n  text-align: center;\n  margin-bottom: ${theme.spacing.lg}px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n`;\n\nexport const FeaturedCardValue = styled.Text`\n  font-size: 52px;\n  font-weight: 800;\n  color: ${theme.colors.text};\n  text-align: center;\n  margin-bottom: ${theme.spacing.md}px;\n  line-height: 56px;\n`;\n\nexport const FeaturedCardSubtitle = styled.Text`\n  font-size: ${theme.fontSizes.xs}px;\n  color: ${theme.colors.textSecondary};\n  text-align: center;\n  font-weight: 500;\n`;\n\nexport const FeaturedCardAccent = styled.View`\n  position: absolute;\n  top: -40px;\n  right: -40px;\n  width: 120px;\n  height: 120px;\n  border-radius: 60px;\n  background-color: ${theme.colors.accent};\n  opacity: 0.1;\n`;\n\nexport const FeaturedCardIcon = styled.View`\n  position: absolute;\n  top: ${theme.spacing.lg}px;\n  right: ${theme.spacing.lg}px;\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  background-color: ${theme.colors.primary};\n  justify-content: center;\n  align-items: center;\n  shadow-color: ${theme.colors.primary};\n  shadow-offset: 0px 2px;\n  shadow-opacity: 0.25;\n  shadow-radius: 4px;\n  elevation: 4;\n`;","size_bytes":4849},"pcount/src/config/api.ts":{"content":"// Configurações da API\nexport const API_CONFIG = {\n  // URL base da API PCount V2 (para login e contratos)\n  BASE_URL_V2: process.env.EXPO_PUBLIC_API_URL_V2 || 'https://pcountapi.homologa.click/api/v2',\n  \n  // URL base da API PCount V1 (para produção, circuitos, etc)\n  BASE_URL_V1: process.env.EXPO_PUBLIC_API_URL_V1 || 'https://pcountapi.homologa.click/api/v1',\n  \n  // Mantém compatibilidade com BASE_URL (usa V2 por padrão)\n  BASE_URL: process.env.EXPO_PUBLIC_API_URL || 'https://pcountapi.homologa.click/api/v2',\n  \n  // Timeout para requests (em ms)\n  TIMEOUT: 10000,\n  \n  // Configurações de retry\n  MAX_RETRIES: 3,\n  RETRY_DELAY: 1000,\n  \n  // Headers padrão\n  DEFAULT_HEADERS: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n};\n\n// Endpoints da API PCount conforme documentação Swagger\nexport const API_ENDPOINTS = {\n  // API V2 - Apenas autenticação disponível\n  V2: {\n    // Autenticação\n    AUTH: {\n      LOGIN: '/Account/Login',\n      REFRESH: '/Account/Refresh',\n      REGISTER_DEVICE: '/Account/RegisterDevice',\n    },\n  },\n  \n  // API V1 - Todos os outros endpoints estão em V1 conforme documentação\n  V1: {\n    // Contratos\n    CONTRACTS: '/Contrato/Get',\n    \n    // Circuitos (Linhas de produção) - Confirmado V1 na documentação\n    CIRCUITOS: (contratoId: string) => `/Circuito/${contratoId}/Get`,\n    \n    // Dashboard - V1 com POST method\n    DASHBOARD: (contratoId: string) => `/Dashboard/${contratoId}/Get`,\n    \n    // Produções - V1 conforme documentação\n    PRODUCTIONS: {\n      GET: (contratoId: string, id: string) => `/Producao/${contratoId}/Get/${id}`,\n      GET_BY_CIRCUITO: (contratoId: string, circuitoId: string) => `/Producao/${contratoId}/GetByCircuito/${circuitoId}`,\n      GET_EM_ANDAMENTO: (contratoId: string) => `/Producao/${contratoId}/GetEmAndamento`,\n      GET_CAPTURAS: (contratoId: string, id: string) => `/Producao/${contratoId}/GetCapturas/${id}`,\n      INICIAR: (contratoId: string) => `/Producao/${contratoId}/Iniciar`,\n      ATUALIZAR: (contratoId: string) => `/Producao/${contratoId}/Atualizar`,\n      FINALIZAR: (contratoId: string) => `/Producao/${contratoId}/Finalizar`,\n      APONTAR: (contratoId: string) => `/Producao/${contratoId}/ApontarProducao`,\n    },\n    \n    // Produtos - V1 conforme documentação\n    PRODUTOS: (contratoId: string) => `/Produto/${contratoId}/Get`,\n    FORMACAO_PALETE: (contratoId: string) => `/Produto/${contratoId}/GetFormacaoPalete`,\n    \n    // Fila de Produção - V1 conforme documentação\n    FILA_PRODUCAO: {\n      INICIAR: (contratoId: string) => `/FilaProducao/${contratoId}/Iniciar`,\n      ADICIONAR: (contratoId: string) => `/FilaProducao/${contratoId}/Adicionar`,\n      ATUALIZAR: (contratoId: string) => `/FilaProducao/${contratoId}/Atualizar`,\n    },\n  },\n};\n\n// Mantém compatibilidade com código existente - Endpoints corretos por versão\nexport const API_ENDPOINTS_COMPAT = {\n  // Autenticação (V2)\n  AUTH: API_ENDPOINTS.V2.AUTH,\n  \n  // Todos os outros endpoints estão em V1 conforme documentação\n  CONTRACTS: API_ENDPOINTS.V1.CONTRACTS,\n  CIRCUITOS: API_ENDPOINTS.V1.CIRCUITOS,\n  DASHBOARD: API_ENDPOINTS.V1.DASHBOARD,\n  PRODUCTIONS: API_ENDPOINTS.V1.PRODUCTIONS,\n  PRODUTOS: API_ENDPOINTS.V1.PRODUTOS,\n  FORMACAO_PALETE: API_ENDPOINTS.V1.FORMACAO_PALETE,\n  FILA_PRODUCAO: API_ENDPOINTS.V1.FILA_PRODUCAO,\n};","size_bytes":3382},"pcount/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';\nimport { AuthContextType, User, Contract } from '../types';\nimport { authService } from '../services/authService';\nimport { contractService } from '../services/contractService';\nimport { contractManager } from '../services/api';\nimport { tokenStorage } from '../services/tokenStorage';\nimport { users } from '../data/users'; // Fallback para desenvolvimento\nimport { contracts as mockContracts } from '../data/contracts'; // Fallback para desenvolvimento\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [selectedContract, setSelectedContract] = useState<Contract | null>(null);\n  const [contracts, setContracts] = useState<Contract[]>([]);\n  const [loading, setLoading] = useState(true); // Inicialmente true para carregamento da sessão\n  const [error, setError] = useState<string | null>(null);\n\n  // Carrega contratos da API\n  const loadContracts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const apiContracts = await contractService.getContracts();\n      setContracts(apiContracts);\n    } catch (err) {\n      const mockFallbackEnabled = process.env.EXPO_PUBLIC_ENABLE_MOCK_FALLBACK === 'true' && __DEV__;\n      \n      if (mockFallbackEnabled) {\n        console.warn('API não disponível, usando dados mock:', err);\n        setContracts(mockContracts);\n        setError(null); // Não mostrar erro para usuário em modo desenvolvimento\n      } else {\n        setError('Erro ao carregar contratos. Verifique sua conexão.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Tenta autenticar via API V2 \n      const response = await authService.login(email, password);\n      \n      if (response.access_token) {\n        // V2 API retorna contratos disponíveis após login\n        if (response.contratos && response.contratos.length > 0) {\n          // Converte contratos da API V2 para formato interno\n          const apiContracts = response.contratos.map(c => ({\n            id: c.contratoId,\n            name: c.contratoNomeFantasia || c.contratoRazaoSocial || 'Contrato',\n            company: c.contratoRazaoSocial || 'Empresa'\n          }));\n          console.log('Contratos carregados da API:', apiContracts);\n          setContracts(apiContracts);\n        }\n        \n        // Criar usuário baseado na resposta da API V2\n        const firstContract = response.contratos?.[0];\n        const user: User = {\n          id: firstContract?.usuarioId || '1',\n          name: firstContract?.usuarioNome || email,\n          email: firstContract?.usuarioEmail || email,\n          password: '',\n          role: 'admin'\n        };\n        \n        setCurrentUser(user);\n        setIsAuthenticated(true);\n        return true;\n      } else {\n        setError('Credenciais inválidas');\n        return false;\n      }\n    } catch (err: any) {\n      // Fallback para desenvolvimento APENAS se habilitado\n      const mockFallbackEnabled = process.env.EXPO_PUBLIC_ENABLE_MOCK_FALLBACK === 'true' && __DEV__;\n      \n      if (mockFallbackEnabled) {\n        console.warn('API de login não disponível, usando autenticação mock:', err);\n        \n        const user = users.find(u => u.email === email && u.password === password);\n        \n        if (user) {\n          setCurrentUser(user);\n          setIsAuthenticated(true);\n          // Usar contratos mock em caso de fallback\n          console.log('Usando contratos mock:', mockContracts);\n          setContracts(mockContracts);\n          return true;\n        }\n      }\n      \n      // Tratar erros específicos da API V2\n      let errorMessage = 'Erro de conexão. Tente novamente.';\n      if (err?.message?.includes('401') || err?.response?.status === 401) {\n        errorMessage = 'Credenciais inválidas';\n      } else if (mockFallbackEnabled) {\n        errorMessage = 'Credenciais inválidas';\n      }\n      \n      setError(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectContract = async (contract: Contract) => {\n    try {\n      console.log('Selecionando contrato:', contract);\n      setSelectedContract(contract);\n      // Atualizar o contrato ativo no gerenciador de contratos para usar nas requisições API\n      contractManager.setActiveContractId(contract.id);\n      \n      // Persistir o contrato selecionado no AsyncStorage\n      await tokenStorage.setContractId(contract.id);\n      await tokenStorage.setContractData(contract);\n      \n      setError(null);\n    } catch (error) {\n      console.error('Erro ao salvar contrato selecionado:', error);\n      setError('Erro ao salvar contrato. Tente novamente.');\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n      // Limpar todos os dados persistidos (tokens + contrato)\n      await tokenStorage.clearAllData();\n    } catch (err) {\n      console.warn('Erro no logout da API:', err);\n      // Mesmo se der erro na API, limpar dados locais\n      await tokenStorage.clearAllData();\n    } finally {\n      setCurrentUser(null);\n      setSelectedContract(null);\n      // Limpar o contrato ativo no logout\n      contractManager.setActiveContractId(null);\n      setIsAuthenticated(false);\n      setContracts([]);\n      setLoading(false);\n      setError(null);\n    }\n  };\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Função para restaurar sessão ao inicializar o app\n  const restoreSession = async () => {\n    try {\n      setLoading(true);\n      \n      // Verificar se há token válido armazenado\n      const hasToken = await tokenStorage.hasToken();\n      if (!hasToken) {\n        setLoading(false);\n        return;\n      }\n\n      // Verificar se há contrato selecionado\n      const storedContractData = await tokenStorage.getContractData();\n      const storedContractId = await tokenStorage.getContractId();\n      \n      if (hasToken && storedContractData && storedContractId) {\n        // Sessão completa: token + contrato selecionado\n        setIsAuthenticated(true);\n        setSelectedContract(storedContractData);\n        contractManager.setActiveContractId(storedContractId);\n        \n        // Tentar validar o token (opcional)\n        try {\n          const user = await authService.validateToken();\n          if (user) {\n            setCurrentUser(user);\n          }\n        } catch (err) {\n          console.warn('Token validation failed, but keeping session:', err);\n          // Manter sessão mesmo se validação falhar\n          setCurrentUser({\n            id: '1',\n            name: 'Usuário',\n            email: 'user@example.com',\n            password: '',\n            role: 'admin'\n          });\n        }\n      } else if (hasToken) {\n        // Apenas token, sem contrato - usuário precisa selecionar contrato\n        setIsAuthenticated(true);\n        try {\n          const user = await authService.validateToken();\n          if (user) {\n            setCurrentUser(user);\n          }\n          // Carregar contratos para seleção\n          await loadContracts();\n        } catch (err) {\n          console.warn('Token inválido, fazendo logout:', err);\n          await logout();\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao restaurar sessão:', error);\n      // Em caso de erro, limpar tudo e forçar novo login\n      await tokenStorage.clearAllData();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Restaurar sessão ao inicializar o app\n  useEffect(() => {\n    restoreSession();\n  }, []);\n\n  const value: AuthContextType = {\n    isAuthenticated,\n    currentUser,\n    selectedContract,\n    contracts,\n    loading,\n    error,\n    login,\n    selectContract,\n    logout,\n    loadContracts,\n    clearError,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":8489},"pcount/src/data/contracts.ts":{"content":"import { Contract } from '../types';\n\n// Dados mock com IDs mais realistas baseados no ambiente de homologação\n// Estes IDs devem corresponder a contratos válidos na API\nexport const contracts: Contract[] = [\n  {\n    id: 'VITON-GUARAVITA-001',\n    name: 'Guaravita',\n    company: 'Viton',\n  },\n  {\n    id: 'ABCCORP-PRODUTOS-002', \n    name: 'Produtos ABC',\n    company: 'ABC Corp',\n  },\n];","size_bytes":392},"pcount/src/data/productionLines.ts":{"content":"import { ProductionLine } from '../types';\n\nexport const productionLines: ProductionLine[] = [\n  {\n    id: '1',\n    name: 'PI-MGA5',\n    status: 'produzindo',\n    code: '4GWL190175221',\n    operator: 'João Silva',\n    location: 'Setor A - Linha 5',\n    capacity: 120,\n    currentProduction: 95,\n    machineType: 'Injetora MGA',\n    lastMaintenance: '2025-09-20',\n    temperature: 185,\n    efficiency: 79.2,\n  },\n  {\n    id: '2',\n    name: 'PI-MQA4',\n    status: 'aguardando',\n    code: '4GWL280084334',\n    operator: 'Maria Santos',\n    location: 'Setor B - Linha 4',\n    capacity: 100,\n    currentProduction: 0,\n    machineType: 'Injetora MQA',\n    lastMaintenance: '2025-09-18',\n    temperature: 25,\n    efficiency: 0,\n  },\n  {\n    id: '3',\n    name: 'PI-MQA3',\n    status: 'produzindo',\n    code: '4GWL28009239Q',\n    operator: 'Carlos Lima',\n    location: 'Setor B - Linha 3',\n    capacity: 80,\n    currentProduction: 72,\n    machineType: 'Injetora MQA',\n    lastMaintenance: '2025-09-22',\n    temperature: 190,\n    efficiency: 90.0,\n  },\n  {\n    id: '4',\n    name: 'PI-MQA2',\n    status: 'iniciando',\n    code: '4GWL280074571',\n    operator: 'Ana Costa',\n    location: 'Setor B - Linha 2',\n    capacity: 110,\n    currentProduction: 5,\n    machineType: 'Injetora MQA',\n    lastMaintenance: '2025-09-19',\n    temperature: 45,\n    efficiency: 4.5,\n  },\n  {\n    id: '5',\n    name: 'PI-MQA1',\n    status: 'produzindo',\n    code: '4GWK320052YR',\n    operator: 'Pedro Oliveira',\n    location: 'Setor B - Linha 1',\n    capacity: 90,\n    currentProduction: 85,\n    machineType: 'Injetora MQA',\n    lastMaintenance: '2025-09-21',\n    temperature: 195,\n    efficiency: 94.4,\n  },\n];","size_bytes":1677},"pcount/src/data/productions.ts":{"content":"import { Production, ProductionStats } from '../types';\n\nexport const productions: Production[] = [\n  {\n    id: '1',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Lwruck@guaravita.com.br',\n    startDate: '28/08/2025 - 05:48',\n    status: 'EM PRODUCAO',\n  },\n  {\n    id: '2',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Lwruck@guaravita.com.br',\n    startDate: '27/08/2025 - 05:58',\n    endDate: '28/08/2025 - 05:20',\n    status: 'FINALIZADA',\n  },\n  {\n    id: '3',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Fcorreia@guaravita.com.br',\n    startDate: '25/09/2025 - 19:51',\n    endDate: '26/09/2025 - 08:15',\n    status: 'FINALIZADA',\n  },\n];\n\nexport const productionStats: ProductionStats = {\n  operationHours: '17:25',\n  productiveHours: '14:00',\n  avgProduction: 6.5,\n  totalProduced: 4082.0,\n  hourlyProduction: [\n    { hour: '06:00', value: 0 },\n    { hour: '07:00', value: 45 },\n    { hour: '08:00', value: 98 },\n    { hour: '09:00', value: 142 },\n    { hour: '10:00', value: 178 },\n    { hour: '11:00', value: 156 },\n    { hour: '12:00', value: 89 },\n    { hour: '13:00', value: 123 },\n    { hour: '14:00', value: 198 },\n    { hour: '15:00', value: 223 },\n    { hour: '16:00', value: 267 },\n    { hour: '17:00', value: 245 },\n    { hour: '18:00', value: 189 },\n    { hour: '19:00', value: 134 },\n    { hour: '20:00', value: 98 },\n    { hour: '21:00', value: 67 },\n    { hour: '22:00', value: 34 },\n    { hour: '23:00', value: 0 },\n  ],\n};","size_bytes":1650},"pcount/src/data/users.ts":{"content":"import { User } from '../types';\n\n// Usuário padrão Admin/Admin conforme solicitado\nexport const users: User[] = [\n  {\n    id: '1', \n    email: 'Admin',\n    password: 'Admin',\n    name: 'Administrador',\n    role: 'admin',\n  },\n  {\n    id: '2',\n    email: 'operador@example.com',\n    password: 'op123',\n    name: 'Operador',\n    role: 'operator',\n  },\n];","size_bytes":355},"pcount/src/hooks/useApi.ts":{"content":"import { useState, useEffect } from 'react';\n\n// Hook genérico para gerenciar chamadas de API\nexport function useApi<T>(\n  apiCall: () => Promise<T>,\n  dependencies: any[] = []\n) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await apiCall();\n      setData(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Erro desconhecido');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Fazer no-op se alguma dependência crítica (como contratoId) for falsy\n    const shouldSkip = dependencies.some((dep, index) => {\n      // Primeiro parâmetro geralmente é contratoId - deve ser uma string válida\n      if (index === 0 && (typeof dep !== 'string' || dep.trim() === '')) {\n        return true;\n      }\n      return false;\n    });\n    \n    if (shouldSkip) {\n      setData(null);\n      setLoading(false);\n      setError(null);\n      return;\n    }\n    \n    fetchData();\n  }, dependencies);\n\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchData,\n  };\n}\n\n// Hook para chamadas manuais (não automáticas)\nexport function useAsyncOperation<T>() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const execute = async (operation: () => Promise<T>): Promise<T | null> => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await operation();\n      return result;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(errorMessage);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    execute,\n    loading,\n    error,\n    clearError: () => setError(null),\n  };\n}","size_bytes":1961},"pcount/src/hooks/useMockFallback.ts":{"content":"import { useState, useEffect } from 'react';\nimport { Production, ProductionLine, ProductionStats } from '../types';\nimport { productions as mockProductions, productionStats as mockStats } from '../data/productions';\nimport { productionLines as mockLines } from '../data/productionLines';\nimport { productionLineService } from '../services/productionLineService';\nimport { productionService } from '../services/productionService';\n\n// Hook para fallback de dados mock em desenvolvimento\nexport function useMockFallback<T>(\n  apiCall: () => Promise<T>,\n  mockData: T,\n  dependencies: any[] = []\n) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const result = await apiCall();\n      setData(result);\n    } catch (err) {\n      const mockFallbackEnabled = process.env.EXPO_PUBLIC_ENABLE_MOCK_FALLBACK === 'true';\n      \n      if (mockFallbackEnabled) {\n        console.warn('API falhou, usando dados mock:', err);\n        setData(mockData);\n        setError(null);\n      } else {\n        setError(err instanceof Error ? err.message : 'Erro desconhecido');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, dependencies);\n\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchData,\n  };\n}\n\n// Hook específico para linhas de produção com fallback\nexport function useProductionLinesWithFallback(contractId?: string) {\n  return useMockFallback(\n    async () => {\n      console.log('Tentando buscar linhas de produção para contrato:', contractId);\n      if (!contractId) {\n        throw new Error('ID do contrato não fornecido');\n      }\n      return productionLineService.getProductionLinesByContract(contractId);\n    },\n    mockLines,\n    [contractId]\n  );\n}\n\n// Hook específico para produções com fallback\nexport function useProductionsWithFallback(contractId: string, filters?: {\n  lineId?: string;\n  status?: Production['status'];\n  startDate?: string;\n  endDate?: string;\n}) {\n  return useMockFallback(\n    async () => {\n      return productionService.getProductions(contractId, filters);\n    },\n    mockProductions,\n    [contractId, filters?.lineId, filters?.status, filters?.startDate, filters?.endDate]\n  );\n}\n\n// Hook específico para estatísticas com fallback\nexport function useProductionStatsWithFallback(contractId: string, filters?: {\n  lineId?: string;\n  startDate?: string;\n  endDate?: string;\n  usuarioId?: string;\n}) {\n  return useMockFallback(\n    async () => {\n      return productionService.getProductionStats(contractId, filters);\n    },\n    mockStats,\n    [contractId, filters?.lineId, filters?.startDate, filters?.endDate, filters?.usuarioId]\n  );\n}","size_bytes":2865},"pcount/src/hooks/useProductions.ts":{"content":"import { useState, useEffect } from 'react';\nimport { Production, ProductionLine, ProductionStats } from '../types';\nimport { productionService } from '../services/productionService';\nimport { productionLineService } from '../services/productionLineService';\nimport { useApi } from './useApi';\nimport { useProductionLinesWithFallback, useProductionsWithFallback, useProductionStatsWithFallback } from './useMockFallback';\n\n// Hook para buscar produções\nexport function useProductions(contratoId: string, filters?: {\n  lineId?: string;\n  status?: Production['status'];\n  startDate?: string;\n  endDate?: string;\n}) {\n  return useProductionsWithFallback(contratoId, filters);\n}\n\n// Hook para buscar linhas de produção\nexport function useProductionLines(contractId: string) {\n  return useProductionLinesWithFallback(contractId);\n}\n\n// Hook para buscar estatísticas de produção\nexport function useProductionStats(contratoId: string, filters?: {\n  lineId?: string;\n  startDate?: string;\n  endDate?: string;\n  usuarioId?: string;\n}) {\n  return useProductionStatsWithFallback(contratoId, filters);\n}\n\n// Hook para operações manuais de produção\nexport function useProductionOperations(contratoId: string) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const createProduction = async (producaoData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await productionService.createProduction(contratoId, producaoData);\n      return result;\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : 'Erro ao criar produção';\n      setError(errorMsg);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProduction = async (producaoData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await productionService.updateProduction(contratoId, producaoData);\n      return result;\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : 'Erro ao atualizar produção';\n      setError(errorMsg);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const finishProduction = async (producaoData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await productionService.finishProduction(contratoId, producaoData);\n      return result;\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : 'Erro ao finalizar produção';\n      setError(errorMsg);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // updateLineStatus removido - operação não disponível na API atual\n\n  return {\n    createProduction,\n    updateProduction,\n    finishProduction,\n    loading,\n    error,\n    clearError: () => setError(null),\n  };\n}","size_bytes":2830},"pcount/src/navigation/AppNavigator.tsx":{"content":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useAuth } from '../contexts/AuthContext';\nimport { theme } from '../theme';\nimport { CustomHeader } from '../components/CustomHeader';\nimport { LoginScreen } from '../screens/LoginScreen';\nimport { ContractScreen } from '../screens/ContractScreen';\nimport { DashboardScreen } from '../screens/DashboardScreen';\nimport { LinesScreen } from '../screens/LinesScreen';\nimport { ProductionScreen } from '../screens/ProductionScreen';\nimport { LineDetailScreen } from '../screens/LineDetailScreen';\nimport { ProductionDetailScreen } from '../screens/ProductionDetailScreen';\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nconst MainTabs = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: theme.colors.primary,\n        tabBarInactiveTintColor: theme.colors.textSecondary,\n        header: () => <CustomHeader />,\n      }}\n    >\n      <Tab.Screen \n        name=\"Dashboard\" \n        component={DashboardScreen}\n        options={{\n          tabBarShowLabel: false,\n          tabBarIcon: ({ color, size }) => (\n            <Icon name=\"dashboard\" size={size} color={color} />\n          ),\n          headerShown: false,\n        }}\n      />\n      <Tab.Screen \n        name=\"Lines\" \n        component={LinesScreen}\n        options={{\n          tabBarShowLabel: false,\n          tabBarIcon: ({ color, size }) => (\n            <Icon name=\"view-list\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen \n        name=\"Production\" \n        component={ProductionScreen}\n        options={{\n          tabBarShowLabel: false,\n          tabBarIcon: ({ color, size }) => (\n            <Icon name=\"precision-manufacturing\" size={size} color={color} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport const AppNavigator = () => {\n  const { isAuthenticated, selectedContract } = useAuth();\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator \n        screenOptions={{ \n          headerShown: true,\n          header: () => <CustomHeader />,\n        }}\n      >\n        {!isAuthenticated ? (\n          <Stack.Screen \n            name=\"Login\" \n            component={LoginScreen}\n            options={{ headerShown: false }}\n          />\n        ) : !selectedContract ? (\n          <Stack.Screen \n            name=\"ContractScreen\" \n            component={ContractScreen}\n            options={{ headerShown: false }}\n          />\n        ) : (\n          <>\n            <Stack.Screen \n              name=\"MainTabs\" \n              component={MainTabs}\n              options={{ headerShown: false }}\n            />\n            <Stack.Screen \n              name=\"LineDetail\" \n              component={LineDetailScreen}\n              options={{ \n                header: () => <CustomHeader title=\"Produção de linha\" showBackButton={true} />\n              }}\n            />\n            <Stack.Screen \n              name=\"ProductionDetail\" \n              component={ProductionDetailScreen}\n              options={{ \n                header: () => <CustomHeader title=\"Detalhes da Produção\" showBackButton={true} />\n              }}\n            />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};","size_bytes":3545},"pcount/src/screens/ContractScreen.tsx":{"content":"import React from 'react';\nimport { FlatList } from 'react-native';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Contract } from '../types';\nimport { LoadingSpinner } from '../components/LoadingSpinner';\nimport { ErrorMessage } from '../components/ErrorMessage';\nimport {\n  Container,\n  Title,\n  Card,\n  ButtonText,\n} from '../components/StyledComponents';\n\ninterface ContractScreenProps {\n  navigation: any;\n}\n\nexport const ContractScreen: React.FC<ContractScreenProps> = ({ navigation }) => {\n  const { selectContract, contracts, loading, error, loadContracts } = useAuth();\n\n  const handleContractSelect = (contract: Contract) => {\n    selectContract(contract);\n    // Removido navigation.navigate - deixa o AppNavigator controlar automaticamente\n  };\n\n  // Mostra loading spinner enquanto carrega\n  if (loading) {\n    return <LoadingSpinner message=\"Carregando contratos...\" />;\n  }\n\n  // Mostra erro se houver\n  if (error) {\n    return (\n      <ErrorMessage \n        message={error} \n        onRetry={loadContracts}\n        retryText=\"Tentar novamente\"\n      />\n    );\n  }\n\n  return (\n    <Container style={{ padding: 16 }}>\n      <Title>Selecione o Contrato</Title>\n      \n      <FlatList\n        data={contracts}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Card onPress={() => handleContractSelect(item)}>\n            <ButtonText variant=\"secondary\">{item.name}</ButtonText>\n          </Card>\n        )}\n        showsVerticalScrollIndicator={false}\n      />\n    </Container>\n  );\n};","size_bytes":1548},"pcount/src/screens/DashboardScreen.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { View, Text, ScrollView, Dimensions, TouchableOpacity, Modal, FlatList, useWindowDimensions } from 'react-native';\nimport { Svg, Rect, Text as SvgText, Line, G } from 'react-native-svg';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { useProductionStats, useProductionLines } from '../hooks/useProductions';\nimport { useAuth } from '../contexts/AuthContext';\nimport {\n  Container,\n  Title,\n  Card,\n  FeaturedCard,\n  FeaturedCardTitle,\n  FeaturedCardValue,\n  FeaturedCardSubtitle,\n  FeaturedCardAccent,\n  FeaturedCardIcon,\n  Button,\n  ButtonText,\n  Input,\n} from '../components/StyledComponents';\nimport { LoadingSpinner } from '../components/LoadingSpinner';\nimport { ErrorMessage } from '../components/ErrorMessage';\nimport { theme } from '../theme';\n\n// Funções para obter valores responsivos baseados na largura\nconst getResponsivePadding = (width: number) => {\n  if (width < 375) return 12;\n  if (width < 768) return 16;\n  return 20;\n};\n\nconst getResponsiveCardSpacing = (width: number) => {\n  if (width < 375) return theme.spacing.xs / 2;\n  if (width < 768) return theme.spacing.xs;\n  return theme.spacing.sm;\n};\n\n// Componente de cartão do Total Produzido com design modernizado\nconst TotalProducedCard: React.FC<{ \n  value: number; \n  title: string;\n  subtitle?: string;\n}> = ({ value, title, subtitle }) => {\n  const { width } = useWindowDimensions();\n  const isSmallScreen = width < 375;\n  // Garantir que o valor seja positivo\n  const safeValue = Math.max(0, value);\n  \n  // Definir os níveis e cores (baseado na imagem de referência)\n  const levels = [\n    { threshold: 4800, color: '#dc2626', label: '4800' },\n    { threshold: 6600, color: '#ea580c', label: '6600' },\n    { threshold: 8400, color: '#65a30d', label: '8400' },\n    { threshold: 10200, color: '#16a34a', label: '10200' },\n    { threshold: 13000, color: '#0891b2', label: '13000' }\n  ];\n  \n  // Determinar qual nível foi atingido\n  const currentLevel = levels.reduce((prev, curr) => \n    safeValue >= curr.threshold ? curr : prev, \n    levels[0]\n  );\n  \n  return (\n    <View style={{\n      backgroundColor: '#ffffff',\n      borderRadius: theme.borderRadius['2xl'],\n      padding: isSmallScreen ? theme.spacing.lg : theme.spacing.xl,\n      marginVertical: theme.spacing.md,\n      shadowColor: theme.colors.shadow,\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 0.15,\n      shadowRadius: 12,\n      elevation: 6,\n      position: 'relative',\n      overflow: 'hidden'\n    }}>\n      {/* Efeito de gradiente de fundo */}\n      <LinearGradient\n        colors={['rgba(6, 182, 212, 0.05)', 'rgba(6, 182, 212, 0.02)']}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        }}\n      />\n      \n      {/* Título */}\n      <Text style={{\n        fontSize: isSmallScreen ? theme.fontSizes.xs : theme.fontSizes.sm,\n        fontWeight: '700',\n        color: theme.colors.text,\n        textAlign: 'center',\n        marginBottom: isSmallScreen ? theme.spacing.md : theme.spacing.lg,\n        letterSpacing: 1,\n        textTransform: 'uppercase'\n      }}>\n        {title}\n      </Text>\n      \n      {/* Layout do conteúdo principal */}\n      <View style={{ alignItems: 'center' }}>\n        {/* Círculo visual com indicador de progresso */}\n        <View style={{\n          width: isSmallScreen ? 140 : 180,\n          height: isSmallScreen ? 140 : 180,\n          borderRadius: isSmallScreen ? 70 : 90,\n          backgroundColor: '#f8fafc',\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginBottom: isSmallScreen ? theme.spacing.md : theme.spacing.lg,\n          borderWidth: isSmallScreen ? 6 : 8,\n          borderColor: currentLevel.color,\n          position: 'relative'\n        }}>\n          {/* Valor principal */}\n          <Text \n            adjustsFontSizeToFit\n            numberOfLines={1}\n            style={{\n              fontSize: isSmallScreen ? 28 : 36,\n              fontWeight: '900',\n              color: theme.colors.text,\n              textAlign: 'center',\n              paddingHorizontal: theme.spacing.sm\n            }}\n          >\n            {safeValue.toLocaleString('pt-BR')}\n          </Text>\n          \n          {/* Indicador pequeno do nível atual */}\n          <View style={{\n            position: 'absolute',\n            top: isSmallScreen ? -8 : -12,\n            right: isSmallScreen ? -8 : -12,\n            width: isSmallScreen ? 20 : 24,\n            height: isSmallScreen ? 20 : 24,\n            borderRadius: isSmallScreen ? 10 : 12,\n            backgroundColor: currentLevel.color,\n            justifyContent: 'center',\n            alignItems: 'center'\n          }}>\n            <MaterialIcons name=\"trending-up\" size={isSmallScreen ? 12 : 14} color=\"#ffffff\" />\n          </View>\n        </View>\n        \n        {/* Legend responsiva */}\n        <View style={{ \n          flexDirection: 'row', \n          flexWrap: 'wrap', \n          justifyContent: 'center',\n          marginBottom: isSmallScreen ? theme.spacing.sm : theme.spacing.md,\n          paddingHorizontal: theme.spacing.xs\n        }}>\n          {levels.map((level, index) => (\n            <View key={index} style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              marginHorizontal: isSmallScreen ? 2 : theme.spacing.xs,\n              marginBottom: theme.spacing.xs,\n              backgroundColor: safeValue >= level.threshold ? level.color : '#f1f5f9',\n              paddingHorizontal: isSmallScreen ? 6 : theme.spacing.sm,\n              paddingVertical: isSmallScreen ? 2 : 4,\n              borderRadius: theme.borderRadius.md,\n              opacity: safeValue >= level.threshold ? 1 : 0.6\n            }}>\n              <Text style={{\n                fontSize: isSmallScreen ? 10 : theme.fontSizes.xs,\n                color: safeValue >= level.threshold ? '#ffffff' : theme.colors.text,\n                fontWeight: '700'\n              }}>\n                {level.label}\n              </Text>\n            </View>\n          ))}\n        </View>\n      </View>\n      \n      {subtitle && (\n        <Text style={{\n          fontSize: theme.fontSizes.xs,\n          color: theme.colors.textSecondary,\n          textAlign: 'center',\n          fontWeight: '500',\n          marginTop: theme.spacing.sm\n        }}>\n          {subtitle}\n        </Text>\n      )}\n    </View>\n  );\n};\n\n// Componente de cartão de estatística modernizado\nconst StatCard: React.FC<{\n  title: string;\n  value: string;\n  subtitle: string;\n  icon: string;\n  accentColor: string;\n  backgroundColor?: string;\n}> = ({ title, value, subtitle, icon, accentColor, backgroundColor = '#ffffff' }) => {\n  const { width } = useWindowDimensions();\n  // Tamanhos responsivos baseados no tamanho da tela\n  const isSmallScreen = width < 375;\n  const isLargeScreen = width >= 768;\n  const cardPadding = isSmallScreen ? theme.spacing.sm : theme.spacing.md;\n  const titleFontSize = isSmallScreen ? 10 : theme.fontSizes.xs;\n  const valueFontSize = isSmallScreen ? theme.fontSizes.lg : theme.fontSizes.xl;\n  const subtitleFontSize = isSmallScreen ? 9 : theme.fontSizes.xs;\n  const iconSize = isSmallScreen ? 24 : 28;\n  const iconPadding = isSmallScreen ? 4 : 6;\n  const iconInnerSize = isSmallScreen ? 14 : 16;\n  \n  return (\n    <View style={{\n      backgroundColor: backgroundColor,\n      borderRadius: theme.borderRadius.xl,\n      padding: cardPadding,\n      flex: 1,\n      marginHorizontal: 0,\n      shadowColor: theme.colors.shadow,\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 8,\n      elevation: 3,\n      borderLeftWidth: 4,\n      borderLeftColor: accentColor,\n      minHeight: isSmallScreen ? 70 : 80,\n      maxWidth: isLargeScreen ? 180 : undefined // Limite máximo em telas grandes\n    }}>\n      <View style={{ \n        flexDirection: 'row', \n        justifyContent: 'space-between', \n        alignItems: 'flex-start',\n        marginBottom: theme.spacing.xs\n      }}>\n        <Text \n          numberOfLines={1}\n          style={{ \n            fontSize: titleFontSize, \n            color: theme.colors.textSecondary,\n            fontWeight: '600',\n            flex: 1\n          }}\n        >\n          {title}\n        </Text>\n        <View style={{\n          backgroundColor: accentColor,\n          borderRadius: theme.borderRadius.sm,\n          width: iconSize,\n          height: iconSize,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }}>\n          <MaterialIcons name={icon as any} size={iconInnerSize} color=\"#ffffff\" />\n        </View>\n      </View>\n      \n      <Text \n        numberOfLines={1}\n        adjustsFontSizeToFit\n        style={{ \n          fontSize: valueFontSize, \n          fontWeight: '800', \n          color: theme.colors.text,\n          marginBottom: 2\n        }}\n      >\n        {value}\n      </Text>\n      \n      <Text \n        numberOfLines={1}\n        style={{ \n          fontSize: subtitleFontSize, \n          color: theme.colors.textSecondary,\n          fontWeight: '500'\n        }}\n      >\n        {subtitle}\n      </Text>\n    </View>\n  );\n};\n\n// Componente de gráfico de barras modernizado para mobile\nconst BarChart: React.FC<{ data: Array<{ hour: string; value: number }> }> = ({ data }) => {\n  const { width: screenWidth } = useWindowDimensions();\n  if (!data || data.length === 0) {\n    return (\n      <View style={{ \n        alignItems: 'center', \n        marginVertical: theme.spacing.lg, \n        height: 160, \n        justifyContent: 'center',\n        backgroundColor: '#f8fafc',\n        borderRadius: theme.borderRadius.xl,\n        padding: theme.spacing.lg,\n        borderWidth: 1,\n        borderColor: '#e2e8f0'\n      }}>\n        <MaterialIcons name=\"equalizer\" size={32} color={theme.colors.textSecondary} />\n        <Text style={{ \n          color: theme.colors.textSecondary, \n          textAlign: 'center',\n          fontSize: theme.fontSizes.sm,\n          fontWeight: '500',\n          marginTop: theme.spacing.sm\n        }}>\n          Nenhum dado disponível\n        </Text>\n      </View>\n    );\n  }\n\n  // Tamanho responsivo e adaptativo para diferentes tamanhos de tela\n  const baseChartWidth = Math.min(screenWidth - 40, 480);\n  const chartHeight = 140;\n  const maxValue = Math.max(...data.map(d => d.value), 1);\n  const padding = { top: 20, right: 16, bottom: 30, left: 16 };\n  \n  // Calcular largura das barras para evitar overflow\n  const availableWidth = baseChartWidth - padding.left - padding.right;\n  const barGroupWidth = availableWidth / data.length;\n  const actualBarWidth = Math.min(barGroupWidth * 0.7, 28); // Máximo 28px por barra\n  const showLabels = barGroupWidth >= 14; // Só mostrar labels se houver espaço\n\n  return (\n    <View style={{ marginVertical: theme.spacing.md, alignItems: 'center' }}>\n      <View style={{ alignItems: 'center' }}>\n        <Svg width={baseChartWidth} height={chartHeight + padding.top + padding.bottom}>\n          {/* Background sutil */}\n          <Rect\n            x={0}\n            y={0}\n            width={baseChartWidth}\n            height={chartHeight + padding.top + padding.bottom}\n            fill=\"#fafbfc\"\n            rx={8}\n          />\n          \n          {/* Grid lines horizontais sutis */}\n          {[1, 2, 3].map((i) => {\n            const y = padding.top + (i * chartHeight) / 4;\n            return (\n              <Line\n                key={i}\n                x1={padding.left}\n                y1={y}\n                x2={baseChartWidth - padding.right}\n                y2={y}\n                stroke=\"#e5e7eb\"\n                strokeWidth={0.5}\n                opacity={0.7}\n              />\n            );\n          })}\n\n          {/* Barras com gradiente e estilo moderno */}\n          {data.map((item, index) => {\n            const barHeight = Math.max((item.value / maxValue) * chartHeight, 4);\n            const x = padding.left + index * barGroupWidth + (barGroupWidth - actualBarWidth) / 2;\n            const y = padding.top + chartHeight - barHeight;\n            \n            return (\n              <G key={index}>\n                {/* Barra principal */}\n                <Rect\n                  x={x}\n                  y={y}\n                  width={actualBarWidth}\n                  height={barHeight}\n                  fill=\"#3b82f6\"\n                  rx={Math.min(actualBarWidth / 8, 4)}\n                  ry={Math.min(actualBarWidth / 8, 4)}\n                />\n                \n                {/* Efeito de gradiente/highlight */}\n                {actualBarWidth >= 8 && (\n                  <Rect\n                    x={x + 2}\n                    y={y}\n                    width={actualBarWidth - 4}\n                    height={Math.max(barHeight * 0.3, 2)}\n                    fill=\"#60a5fa\"\n                    rx={2}\n                    ry={2}\n                    opacity={0.8}\n                  />\n                )}\n                \n                {/* Valor em cima da barra (apenas se houver espaço) */}\n                {barHeight > 20 && showLabels && item.value > 0 && (\n                  <SvgText\n                    x={x + actualBarWidth / 2}\n                    y={y - 6}\n                    fontSize=\"9\"\n                    fill={theme.colors.text}\n                    textAnchor=\"middle\"\n                    fontWeight=\"700\"\n                  >\n                    {item.value}\n                  </SvgText>\n                )}\n                \n                {/* Label do horário */}\n                {showLabels && (\n                  <SvgText\n                    x={x + actualBarWidth / 2}\n                    y={padding.top + chartHeight + 18}\n                    fontSize=\"9\"\n                    fill={theme.colors.textSecondary}\n                    textAnchor=\"middle\"\n                    fontWeight=\"600\"\n                  >\n                    {item.hour.split(':')[0]}h\n                  </SvgText>\n                )}\n              </G>\n            );\n          })}\n\n          {/* Linha base sutil */}\n          <Line\n            x1={padding.left}\n            y1={padding.top + chartHeight}\n            x2={baseChartWidth - padding.right}\n            y2={padding.top + chartHeight}\n            stroke=\"#d1d5db\"\n            strokeWidth={1.5}\n            strokeLinecap=\"round\"\n          />\n        </Svg>\n      </View>\n      \n      {/* Valor máximo para referência */}\n      {maxValue > 0 && (\n        <Text style={{\n          fontSize: theme.fontSizes.xs,\n          color: theme.colors.textSecondary,\n          marginTop: theme.spacing.sm,\n          textAlign: 'center'\n        }}>\n          Máximo: {maxValue} unidades\n        </Text>\n      )}\n    </View>\n  );\n};\n\n// Componente do header modernizado\nconst DashboardHeader: React.FC<{ onLogout: () => void }> = ({ onLogout }) => {\n  return (\n    <LinearGradient\n      colors={['#1e40af', '#2563eb', '#3b82f6']}\n      start={{ x: 0, y: 0 }}\n      end={{ x: 1, y: 1 }}\n      style={{\n        paddingTop: 50,\n        paddingBottom: 24,\n        paddingHorizontal: theme.spacing.lg,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        shadowColor: theme.colors.shadow,\n        shadowOffset: { width: 0, height: 6 },\n        shadowOpacity: 0.2,\n        shadowRadius: 16,\n        elevation: 10\n      }}\n    >\n      {/* Logo VITON */}\n      <View style={{\n        backgroundColor: '#fbbf24',\n        borderRadius: theme.borderRadius.xl,\n        width: 58,\n        height: 42,\n        justifyContent: 'center',\n        alignItems: 'center',\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 3 },\n        shadowOpacity: 0.3,\n        shadowRadius: 6,\n        elevation: 5\n      }}>\n        <Text style={{ \n          fontSize: theme.fontSizes.xs, \n          fontWeight: '900', \n          color: '#000',\n          letterSpacing: 0.8\n        }}>VITON</Text>\n      </View>\n      \n      {/* Logo PCOUNT */}\n      <Text style={{\n        fontSize: theme.fontSizes['3xl'],\n        fontWeight: '900',\n        color: theme.colors.textInverse,\n        textAlign: 'center',\n        flex: 1,\n        letterSpacing: -0.5,\n        marginHorizontal: theme.spacing.lg\n      }}>PCOUNT</Text>\n      \n      {/* Botão Logout */}\n      <TouchableOpacity\n        onPress={onLogout}\n        style={{\n          backgroundColor: 'rgba(255, 255, 255, 0.2)',\n          borderRadius: theme.borderRadius.xl,\n          width: 44,\n          height: 44,\n          justifyContent: 'center',\n          alignItems: 'center',\n          borderWidth: 1,\n          borderColor: 'rgba(255, 255, 255, 0.3)',\n          shadowColor: '#000',\n          shadowOffset: { width: 0, height: 2 },\n          shadowOpacity: 0.25,\n          shadowRadius: 8,\n          elevation: 5\n        }}\n      >\n        <MaterialIcons name=\"power-settings-new\" size={22} color={theme.colors.textInverse} />\n      </TouchableOpacity>\n    </LinearGradient>\n  );\n};\n\n// Componente do seletor de datas\nconst DateSelector: React.FC<{\n  startDate: string;\n  endDate: string;\n  onDateChange: (start: string, end: string) => void;\n}> = ({ startDate, endDate, onDateChange }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [tempStartDate, setTempStartDate] = useState(startDate);\n  const [tempEndDate, setTempEndDate] = useState(endDate);\n  \n  const formatDate = (dateStr: string) => {\n    if (!dateStr) return '--';\n    \n    // Parse manual da data ISO para evitar problemas de timezone\n    const [year, month, day] = dateStr.split('-').map(Number);\n    if (!year || !month || !day) return '--';\n    \n    // Cria data local sem problemas de timezone\n    const date = new Date(year, month - 1, day);\n    return date.toLocaleDateString('pt-BR', { \n      day: '2-digit', \n      month: '2-digit', \n      year: 'numeric'\n    });\n  };\n  \n  // Função para obter data e hora atual do Brasil\n  const getBrazilDateTime = () => {\n    const now = new Date();\n    return now.toLocaleString('pt-BR', {\n      timeZone: 'America/Sao_Paulo',\n      day: '2-digit',\n      month: '2-digit', \n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  \n  // Função para obter data atual do Brasil no formato YYYY-MM-DD\n  const getBrazilDate = () => {\n    const now = new Date();\n    const brazilTime = new Intl.DateTimeFormat('en-CA', {\n      timeZone: 'America/Sao_Paulo',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    }).format(now);\n    return brazilTime; // Retorna no formato YYYY-MM-DD\n  };\n  \n  // Função para obter data no formato YYYY-MM-DD (fuso horário do Brasil)\n  const getLocalDateString = (date: Date = new Date()) => {\n    return new Intl.DateTimeFormat('en-CA', {\n      timeZone: 'America/Sao_Paulo',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    }).format(date);\n  };\n  \n  // Função para converter YYYY-MM-DD para DD/MM/YYYY\n  const formatDateForInput = (dateStr: string) => {\n    if (!dateStr) return '';\n    \n    // Verifica se já está no formato DD/MM/YYYY\n    if (dateStr.includes('/')) {\n      return dateStr;\n    }\n    \n    // Valida formato YYYY-MM-DD\n    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!isoDateRegex.test(dateStr)) {\n      return dateStr; // Retorna como está se não for válido\n    }\n    \n    const [year, month, day] = dateStr.split('-');\n    if (year && month && day) {\n      return `${day}/${month}/${year}`;\n    }\n    return dateStr;\n  };\n  \n  // Função para converter DD/MM/YYYY para YYYY-MM-DD\n  const parseInputDate = (dateStr: string) => {\n    if (!dateStr) return '';\n    \n    // Se já estiver no formato YYYY-MM-DD válido, retorna como está\n    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (isoDateRegex.test(dateStr)) {\n      return dateStr;\n    }\n    \n    // Se estiver no formato DD/MM/YYYY, converte\n    const brDateRegex = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\n    if (brDateRegex.test(dateStr)) {\n      const [day, month, year] = dateStr.split('/');\n      if (day && month && year) {\n        const dayPadded = day.padStart(2, '0');\n        const monthPadded = month.padStart(2, '0');\n        \n        // Valida se a data é válida\n        const testDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n        if (testDate.getFullYear() == parseInt(year) && \n            testDate.getMonth() == parseInt(month) - 1 && \n            testDate.getDate() == parseInt(day)) {\n          return `${year}-${monthPadded}-${dayPadded}`;\n        }\n      }\n    }\n    \n    // Se não conseguir converter, retorna vazio para evitar datas inválidas\n    return '';\n  };\n  \n  const handleSave = () => {\n    // Converte as datas de DD/MM/YYYY para YYYY-MM-DD antes de salvar\n    const startDateConverted = parseInputDate(tempStartDate);\n    const endDateConverted = parseInputDate(tempEndDate);\n    \n    // Só salva se ambas as datas forem válidas\n    if (startDateConverted && endDateConverted) {\n      onDateChange(startDateConverted, endDateConverted);\n      setShowModal(false);\n    } else {\n      // Aqui poderia mostrar uma mensagem de erro, por enquanto só não fecha o modal\n      console.warn('Datas inválidas:', { tempStartDate, tempEndDate });\n    }\n  };\n  \n  const presetRanges = [\n    { label: 'Hoje', start: getBrazilDate(), end: getBrazilDate() },\n    { label: 'Esta semana', start: getWeekStart(), end: getBrazilDate() },\n    { label: 'Este mês', start: getMonthStart(), end: getBrazilDate() },\n  ];\n  \n  function getWeekStart() {\n    const now = new Date();\n    \n    // Obtém a data atual no Brasil\n    const brazilToday = getBrazilDate();\n    const [year, month, day] = brazilToday.split('-').map(Number);\n    \n    // Cria data UTC para o dia atual do Brasil\n    const brazilDate = new Date(Date.UTC(year, month - 1, day));\n    const dayOfWeek = brazilDate.getUTCDay();\n    \n    // Calcula o início da semana (domingo = 0)\n    const daysToSubtract = dayOfWeek;\n    const weekStartUTC = new Date(brazilDate);\n    weekStartUTC.setUTCDate(brazilDate.getUTCDate() - daysToSubtract);\n    \n    // Formata de volta para YYYY-MM-DD\n    const weekStartYear = weekStartUTC.getUTCFullYear();\n    const weekStartMonth = String(weekStartUTC.getUTCMonth() + 1).padStart(2, '0');\n    const weekStartDay = String(weekStartUTC.getUTCDate()).padStart(2, '0');\n    \n    return `${weekStartYear}-${weekStartMonth}-${weekStartDay}`;\n  }\n  \n  function getMonthStart() {\n    // Obtém a data atual no Brasil\n    const brazilToday = getBrazilDate();\n    const [year, month] = brazilToday.split('-').map(Number);\n    \n    // Primeiro dia do mês atual do Brasil\n    const monthStartYear = year;\n    const monthStartMonth = String(month).padStart(2, '0');\n    const monthStartDay = '01';\n    \n    return `${monthStartYear}-${monthStartMonth}-${monthStartDay}`;\n  };;\n  \n  return (\n    <>\n      <TouchableOpacity\n        onPress={() => {\n          // Converte as datas para DD/MM/YYYY para exibir nos inputs\n          setTempStartDate(formatDateForInput(startDate));\n          setTempEndDate(formatDateForInput(endDate));\n          setShowModal(true);\n        }}\n        style={{\n          backgroundColor: '#ffffff',\n          paddingHorizontal: theme.spacing.lg,\n          paddingVertical: theme.spacing.md,\n          borderRadius: 20,\n          marginBottom: theme.spacing.md,\n          alignSelf: 'flex-start',\n          borderWidth: 1,\n          borderColor: '#e2e8f0',\n          shadowColor: '#64748b',\n          shadowOffset: { width: 0, height: 4 },\n          shadowOpacity: 0.1,\n          shadowRadius: 8,\n          elevation: 4,\n          flexDirection: 'row',\n          alignItems: 'center',\n          minWidth: 240\n        }}\n      >\n        <View style={{\n          backgroundColor: '#3b82f6',\n          borderRadius: 8,\n          width: 32,\n          height: 32,\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginRight: theme.spacing.sm\n        }}>\n          <MaterialIcons name=\"date-range\" size={18} color=\"#ffffff\" />\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={{ \n            color: '#475569', \n            fontSize: theme.fontSizes.xs, \n            fontWeight: '500',\n            marginBottom: 2\n          }}>\n            Período selecionado\n          </Text>\n          <Text style={{ \n            color: '#1e293b', \n            fontSize: theme.fontSizes.sm, \n            fontWeight: '700'\n          }}>\n            {formatDate(startDate)} - {formatDate(endDate)}\n          </Text>\n        </View>\n        <MaterialIcons name=\"keyboard-arrow-down\" size={20} color=\"#64748b\" />\n      </TouchableOpacity>\n      \n      <Modal visible={showModal} transparent animationType=\"slide\">\n        <View style={{\n          flex: 1,\n          backgroundColor: 'rgba(0, 0, 0, 0.6)',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: theme.spacing.lg\n        }}>\n          <View style={{\n            backgroundColor: '#ffffff',\n            borderRadius: 24,\n            padding: theme.spacing.xl,\n            width: '100%',\n            maxWidth: 340,\n            maxHeight: '85%',\n            shadowColor: '#000',\n            shadowOffset: { width: 0, height: 10 },\n            shadowOpacity: 0.25,\n            shadowRadius: 20,\n            elevation: 10\n          }}>\n            <View style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              marginBottom: theme.spacing.lg\n            }}>\n              <View style={{\n                backgroundColor: '#3b82f6',\n                borderRadius: 10,\n                width: 36,\n                height: 36,\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginRight: theme.spacing.md\n              }}>\n                <MaterialIcons name=\"date-range\" size={20} color=\"#ffffff\" />\n              </View>\n              <Text style={{ \n                color: '#1e293b', \n                fontSize: theme.fontSizes.lg, \n                fontWeight: '700'\n              }}>\n                Selecionar Período\n              </Text>\n            </View>\n            \n            {/* Seleção manual de datas */}\n            <View style={{ marginBottom: theme.spacing.lg }}>\n              <Text style={{ \n                color: '#475569', \n                fontSize: theme.fontSizes.sm, \n                fontWeight: '600',\n                marginBottom: theme.spacing.sm\n              }}>\n                Data Inicial:\n              </Text>\n              <View style={{ \n                backgroundColor: '#f8fafc', \n                borderRadius: 16, \n                marginBottom: theme.spacing.md,\n                paddingHorizontal: theme.spacing.md,\n                paddingVertical: theme.spacing.sm,\n                borderWidth: 1,\n                borderColor: '#e2e8f0'\n              }}>\n                <Input\n                  value={tempStartDate}\n                  onChangeText={setTempStartDate}\n                  placeholder=\"dd/mm/yyyy\"\n                  placeholderTextColor=\"#94a3b8\"\n                  style={{ \n                    color: '#1e293b', \n                    backgroundColor: 'transparent',\n                    borderWidth: 0,\n                    margin: 0,\n                    height: 40,\n                    fontSize: theme.fontSizes.sm\n                  }}\n                />\n              </View>\n              \n              <Text style={{ \n                color: '#475569', \n                fontSize: theme.fontSizes.sm, \n                fontWeight: '600',\n                marginBottom: theme.spacing.sm\n              }}>\n                Data Final:\n              </Text>\n              <View style={{ \n                backgroundColor: '#f8fafc', \n                borderRadius: 16, \n                marginBottom: theme.spacing.md,\n                paddingHorizontal: theme.spacing.md,\n                paddingVertical: theme.spacing.sm,\n                borderWidth: 1,\n                borderColor: '#e2e8f0'\n              }}>\n                <Input\n                  value={tempEndDate}\n                  onChangeText={setTempEndDate}\n                  placeholder=\"dd/mm/yyyy\"\n                  placeholderTextColor=\"#94a3b8\"\n                  style={{ \n                    color: '#1e293b', \n                    backgroundColor: 'transparent',\n                    borderWidth: 0,\n                    margin: 0,\n                    height: 40,\n                    fontSize: theme.fontSizes.sm\n                  }}\n                />\n              </View>\n            </View>\n            \n            {/* Períodos pré-definidos */}\n            <Text style={{ \n              color: '#475569', \n              fontSize: theme.fontSizes.sm, \n              fontWeight: '600',\n              marginBottom: theme.spacing.sm\n            }}>\n              Períodos rápidos:\n            </Text>\n            {presetRanges.map((range, index) => (\n              <TouchableOpacity\n                key={index}\n                onPress={() => {\n                  // Converte as datas dos presets para DD/MM/YYYY\n                  setTempStartDate(formatDateForInput(range.start));\n                  setTempEndDate(formatDateForInput(range.end));\n                }}\n                style={{\n                  backgroundColor: '#3b82f6',\n                  paddingHorizontal: theme.spacing.lg,\n                  paddingVertical: theme.spacing.md,\n                  borderRadius: 16,\n                  marginBottom: theme.spacing.sm,\n                  flexDirection: 'row',\n                  alignItems: 'center'\n                }}\n              >\n                <MaterialIcons name=\"schedule\" size={16} color=\"#ffffff\" style={{ marginRight: theme.spacing.sm }} />\n                <Text style={{ \n                  color: '#ffffff', \n                  fontWeight: '600',\n                  fontSize: theme.fontSizes.sm\n                }}>\n                  {range.label}\n                </Text>\n              </TouchableOpacity>\n            ))}\n            \n            <View style={{ flexDirection: 'row', marginTop: theme.spacing.lg, gap: theme.spacing.sm }}>\n              <TouchableOpacity\n                onPress={() => setShowModal(false)}\n                style={{\n                  backgroundColor: '#f1f5f9',\n                  paddingVertical: theme.spacing.md,\n                  paddingHorizontal: theme.spacing.lg,\n                  borderRadius: 16,\n                  flex: 1,\n                  borderWidth: 1,\n                  borderColor: '#e2e8f0'\n                }}\n              >\n                <Text style={{ \n                  color: '#475569', \n                  textAlign: 'center', \n                  fontWeight: '600',\n                  fontSize: theme.fontSizes.sm\n                }}>\n                  Cancelar\n                </Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity\n                onPress={handleSave}\n                style={{\n                  backgroundColor: '#3b82f6',\n                  paddingVertical: theme.spacing.md,\n                  paddingHorizontal: theme.spacing.lg,\n                  borderRadius: 16,\n                  flex: 1\n                }}\n              >\n                <Text style={{ \n                  color: '#ffffff', \n                  textAlign: 'center', \n                  fontWeight: '700',\n                  fontSize: theme.fontSizes.sm\n                }}>\n                  Aplicar\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </>\n  );\n};\n\n// Componente do seletor de produção\nconst ProductionSelector: React.FC<{\n  selectedLineId: string | null;\n  onLineChange: (lineId: string | null) => void;\n  lines: any[];\n}> = ({ selectedLineId, onLineChange, lines }) => {\n  const [showModal, setShowModal] = useState(false);\n  \n  const selectedLine = lines.find(line => line.id === selectedLineId);\n  \n  return (\n    <>\n      <TouchableOpacity\n        onPress={() => setShowModal(true)}\n        style={{\n          backgroundColor: '#ffffff',\n          paddingHorizontal: theme.spacing.lg,\n          paddingVertical: theme.spacing.md,\n          borderRadius: 20,\n          marginBottom: theme.spacing.lg,\n          borderWidth: 1,\n          borderColor: '#e2e8f0',\n          shadowColor: '#64748b',\n          shadowOffset: { width: 0, height: 4 },\n          shadowOpacity: 0.1,\n          shadowRadius: 8,\n          elevation: 4,\n          flexDirection: 'row',\n          alignItems: 'center',\n          alignSelf: 'flex-start',\n          minWidth: 200\n        }}\n      >\n        <View style={{\n          backgroundColor: '#10b981',\n          borderRadius: 8,\n          width: 32,\n          height: 32,\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginRight: theme.spacing.sm\n        }}>\n          <MaterialIcons name=\"factory\" size={18} color=\"#ffffff\" />\n        </View>\n        <View style={{ flex: 1 }}>\n          <Text style={{ \n            color: '#475569', \n            fontSize: theme.fontSizes.xs, \n            fontWeight: '500',\n            marginBottom: 2\n          }}>\n            Linha de produção\n          </Text>\n          <Text style={{ \n            color: '#1e293b', \n            fontSize: theme.fontSizes.sm, \n            fontWeight: '700'\n          }}>\n            {selectedLineId ? selectedLine?.name || 'Linha específica' : 'Todas as Linhas'}\n          </Text>\n        </View>\n        <MaterialIcons name=\"keyboard-arrow-down\" size={20} color=\"#64748b\" />\n      </TouchableOpacity>\n      \n      <Modal visible={showModal} transparent animationType=\"slide\">\n        <View style={{\n          flex: 1,\n          backgroundColor: 'rgba(0, 0, 0, 0.6)',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: theme.spacing.lg\n        }}>\n          <View style={{\n            backgroundColor: '#ffffff',\n            borderRadius: 24,\n            padding: theme.spacing.xl,\n            width: '100%',\n            maxWidth: 320,\n            maxHeight: '80%',\n            shadowColor: '#000',\n            shadowOffset: { width: 0, height: 10 },\n            shadowOpacity: 0.25,\n            shadowRadius: 20,\n            elevation: 10\n          }}>\n            <View style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              marginBottom: theme.spacing.lg\n            }}>\n              <View style={{\n                backgroundColor: '#10b981',\n                borderRadius: 10,\n                width: 36,\n                height: 36,\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginRight: theme.spacing.md\n              }}>\n                <MaterialIcons name=\"factory\" size={20} color=\"#ffffff\" />\n              </View>\n              <Text style={{ \n                color: '#1e293b', \n                fontSize: theme.fontSizes.lg, \n                fontWeight: '700'\n              }}>\n                Selecionar Linha\n              </Text>\n            </View>\n            \n            <TouchableOpacity\n              onPress={() => {\n                onLineChange(null);\n                setShowModal(false);\n              }}\n              style={{\n                backgroundColor: selectedLineId === null ? '#3b82f6' : '#f8fafc',\n                paddingHorizontal: theme.spacing.lg,\n                paddingVertical: theme.spacing.md,\n                borderRadius: 16,\n                marginBottom: theme.spacing.sm,\n                borderWidth: selectedLineId === null ? 0 : 1,\n                borderColor: '#e2e8f0',\n                flexDirection: 'row',\n                alignItems: 'center'\n              }}\n            >\n              <View style={{\n                backgroundColor: selectedLineId === null ? 'rgba(255, 255, 255, 0.2)' : '#e2e8f0',\n                borderRadius: 6,\n                width: 24,\n                height: 24,\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginRight: theme.spacing.sm\n              }}>\n                <MaterialIcons \n                  name=\"check-circle\" \n                  size={16} \n                  color={selectedLineId === null ? '#ffffff' : '#64748b'} \n                />\n              </View>\n              <Text style={{ \n                color: selectedLineId === null ? '#ffffff' : '#1e293b', \n                fontWeight: selectedLineId === null ? '700' : '500',\n                fontSize: theme.fontSizes.sm\n              }}>\n                Todas as Linhas\n              </Text>\n            </TouchableOpacity>\n            \n            <ScrollView style={{ maxHeight: 280 }} showsVerticalScrollIndicator={false}>\n              {lines.map((line) => (\n                <TouchableOpacity\n                  key={line.id}\n                  onPress={() => {\n                    onLineChange(line.id);\n                    setShowModal(false);\n                  }}\n                  style={{\n                    backgroundColor: selectedLineId === line.id ? '#3b82f6' : '#f8fafc',\n                    paddingHorizontal: theme.spacing.lg,\n                    paddingVertical: theme.spacing.md,\n                    borderRadius: 16,\n                    marginBottom: theme.spacing.sm,\n                    borderWidth: selectedLineId === line.id ? 0 : 1,\n                    borderColor: '#e2e8f0',\n                    flexDirection: 'row',\n                    alignItems: 'center'\n                  }}\n                >\n                  <View style={{\n                    backgroundColor: selectedLineId === line.id ? 'rgba(255, 255, 255, 0.2)' : '#e2e8f0',\n                    borderRadius: 6,\n                    width: 24,\n                    height: 24,\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    marginRight: theme.spacing.sm\n                  }}>\n                    <MaterialIcons \n                      name=\"check-circle\" \n                      size={16} \n                      color={selectedLineId === line.id ? '#ffffff' : '#64748b'} \n                    />\n                  </View>\n                  <Text style={{ \n                    color: selectedLineId === line.id ? '#ffffff' : '#1e293b', \n                    fontWeight: selectedLineId === line.id ? '700' : '500',\n                    fontSize: theme.fontSizes.sm\n                  }}>\n                    {line.name} {line.code}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n            \n            <TouchableOpacity\n              onPress={() => setShowModal(false)}\n              style={{\n                backgroundColor: '#f1f5f9',\n                paddingVertical: theme.spacing.md,\n                borderRadius: 16,\n                marginTop: theme.spacing.lg,\n                borderWidth: 1,\n                borderColor: '#e2e8f0'\n              }}\n            >\n              <Text style={{ \n                color: '#475569', \n                textAlign: 'center', \n                fontWeight: '600',\n                fontSize: theme.fontSizes.sm\n              }}>\n                Cancelar\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n    </>\n  );\n};\n\nexport const DashboardScreen: React.FC = () => {\n  const { selectedContract, currentUser, logout } = useAuth();\n  const { width } = useWindowDimensions();\n  \n  // Breakpoints dinâmicos baseados na largura atual\n  const isSmallScreen = width < 375;\n  const isMediumScreen = width >= 375 && width < 768;\n  const isLargeScreen = width >= 768;\n  \n  // Estados para filtros\n  // Função para obter data do Brasil (deve estar antes dos useState)\n  const getBrazilDateForInit = () => {\n    const now = new Date();\n    return new Intl.DateTimeFormat('en-CA', {\n      timeZone: 'America/Sao_Paulo',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    }).format(now);\n  };\n  \n  const [startDate, setStartDate] = useState(getBrazilDateForInit());\n  const [endDate, setEndDate] = useState(getBrazilDateForInit());\n  const [selectedLineId, setSelectedLineId] = useState<string | null>(null);\n  \n  // Buscar linhas de produção\n  const { data: productionLines } = useProductionLines(selectedContract?.id || '');\n  \n  // Construir filtros para a API\n  const filters = useMemo(() => ({\n    startDate,\n    endDate,\n    lineId: selectedLineId || undefined,\n    usuarioId: currentUser?.id,\n  }), [startDate, endDate, selectedLineId, currentUser?.id]);\n  \n  const handleDateChange = (start: string, end: string) => {\n    setStartDate(start);\n    setEndDate(end);\n  };\n  \n  const handleLogout = async () => {\n    await logout();\n  };\n\n  // Verificar se um contrato foi selecionado e usuário autenticado antes de chamar hooks\n  if (!selectedContract) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <ErrorMessage \n          message=\"Nenhum contrato selecionado. Por favor, faça login novamente.\"\n        />\n      </Container>\n    );\n  }\n\n  if (!currentUser?.id) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <ErrorMessage \n          message=\"Usuário não autenticado. Por favor, faça login novamente.\"\n        />\n      </Container>\n    );\n  }\n\n  // Buscar as estatísticas de produção usando o contrato selecionado e filtros\n  const { data: productionStats, loading, error } = useProductionStats(\n    selectedContract.id,\n    filters\n  );\n\n  // Mostrar loading\n  if (loading) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <Title>Carregando Dashboard...</Title>\n        <LoadingSpinner />\n      </Container>\n    );\n  }\n\n  // Mostrar erro\n  if (error) {\n    return (\n      <Container>\n        <ScrollView style={{ padding: 16 }}>\n          <Title>Dashboard</Title>\n          <ErrorMessage message={error} />\n        </ScrollView>\n      </Container>\n    );\n  }\n\n  // Dados padrão caso não haja dados da API\n  const stats = productionStats || {\n    operationHours: '--',\n    productiveHours: '--',\n    avgProduction: 0,\n    totalProduced: 0,\n    hourlyProduction: [],\n  };\n\n  return (\n    <Container>\n      <DashboardHeader onLogout={handleLogout} />\n      \n      <ScrollView \n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={{ \n          paddingBottom: theme.spacing.xl,\n          paddingHorizontal: getResponsivePadding(width),\n          paddingTop: getResponsivePadding(width)\n        }}\n      >\n        <DateSelector\n          startDate={startDate}\n          endDate={endDate}\n          onDateChange={handleDateChange}\n        />\n        \n        <ProductionSelector\n          selectedLineId={selectedLineId}\n          onLineChange={setSelectedLineId}\n          lines={productionLines || []}\n        />\n        \n        <Text style={{ \n          fontSize: isSmallScreen ? 16 : isMediumScreen ? 18 : 20, \n          fontWeight: 'bold', \n          color: theme.colors.text, \n          marginBottom: getResponsivePadding(width),\n          textAlign: 'center',\n          paddingHorizontal: theme.spacing.sm\n        }}>\n          Dashboard {selectedLineId ? productionLines?.find(l => l.id === selectedLineId)?.name : ''}\n        </Text>\n        \n        {/* Cartões de estatísticas com layout responsivo real */}\n        {isSmallScreen ? (\n          // Layout responsivo para telas pequenas: primeiro card full-width, outros dois em linha\n          <View style={{ marginBottom: theme.spacing.lg }}>\n            {/* Primeiro cartão ocupando largura total */}\n            <View style={{ marginBottom: theme.spacing.sm }}>\n              <StatCard\n                title=\"Hora(s)\"\n                value={`${stats.operationHours}`}\n                subtitle=\"Operação\"\n                icon=\"schedule\"\n                accentColor=\"#f59e0b\"\n              />\n            </View>\n            \n            {/* Dois cartões em linha */}\n            <View style={{ \n              flexDirection: 'row'\n            }}>\n              <View style={{ flex: 1, marginRight: getResponsiveCardSpacing(width) / 2 }}>\n                <StatCard\n                  title=\"Hora(s)\"\n                  value={`${stats.productiveHours}`}\n                  subtitle=\"Produtivas\"\n                  icon=\"warning\"\n                  accentColor=\"#ef4444\"\n                />\n              </View>\n              <View style={{ flex: 1, marginLeft: getResponsiveCardSpacing(width) / 2 }}>\n                <StatCard\n                  title=\"Produção\"\n                  value={`${stats.avgProduction}`}\n                  subtitle=\"Média / Hr\"\n                  icon=\"trending-up\"\n                  accentColor=\"#06b6d4\"\n                />\n              </View>\n            </View>\n          </View>\n        ) : (\n          // Layout horizontal tradicional para telas médias e grandes\n          <View style={{ \n            flexDirection: 'row', \n            marginBottom: theme.spacing.lg,\n            paddingHorizontal: theme.spacing.xs\n          }}>\n            <View style={{ flex: 1, marginRight: getResponsiveCardSpacing(width) }}>\n              <StatCard\n                title=\"Hora(s)\"\n                value={`${stats.operationHours}`}\n                subtitle=\"Operação\"\n                icon=\"schedule\"\n                accentColor=\"#f59e0b\"\n              />\n            </View>\n            \n            <View style={{ flex: 1, marginHorizontal: getResponsiveCardSpacing(width) }}>\n              <StatCard\n                title=\"Hora(s)\"\n                value={`${stats.productiveHours}`}\n                subtitle=\"Produtivas\"\n                icon=\"warning\"\n                accentColor=\"#ef4444\"\n              />\n            </View>\n            \n            <View style={{ flex: 1, marginLeft: getResponsiveCardSpacing(width) }}>\n              <StatCard\n                title=\"Produção\"\n                value={`${stats.avgProduction}`}\n                subtitle=\"Média / Hr\"\n                icon=\"trending-up\"\n                accentColor=\"#06b6d4\"\n              />\n            </View>\n          </View>\n        )}\n        \n        {/* Cartão do Total Produzido */}\n        <TotalProducedCard\n          value={stats.totalProduced}\n          title=\"TOTAL PRODUZIDO\"\n          subtitle=\"Unidades produzidas no período\"\n        />\n        \n        <View style={{ \n          backgroundColor: '#ffffff',\n          borderRadius: theme.borderRadius.xl,\n          padding: isSmallScreen ? theme.spacing.md : theme.spacing.lg,\n          marginTop: theme.spacing.lg,\n          shadowColor: theme.colors.shadow,\n          shadowOffset: { width: 0, height: 2 },\n          shadowOpacity: 0.1,\n          shadowRadius: 8,\n          elevation: 3\n        }}>\n          <Text style={{ \n            fontSize: isSmallScreen ? 12 : 14, \n            fontWeight: 'bold', \n            marginBottom: theme.spacing.md, \n            color: theme.colors.text,\n            textAlign: 'center',\n            textTransform: 'uppercase',\n            letterSpacing: 0.5\n          }}>\n            TOTAL PRODUZIDO / HORA\n          </Text>\n          <BarChart data={stats.hourlyProduction} />\n          <Text style={{ \n            fontSize: isSmallScreen ? 10 : 11, \n            color: theme.colors.textSecondary, \n            textAlign: 'center', \n            marginTop: theme.spacing.sm,\n            paddingHorizontal: theme.spacing.sm\n          }}>\n            Unidades produzidas por horário de trabalho\n          </Text>\n        </View>\n      </ScrollView>\n    </Container>\n  );\n};","size_bytes":47660},"pcount/src/screens/LineDetailScreen.tsx":{"content":"import React from 'react';\nimport { ScrollView, View, Text, TouchableOpacity } from 'react-native';\nimport { useProductions } from '../hooks/useProductions';\nimport { useAuth } from '../contexts/AuthContext';\nimport {\n  Container,\n  Card,\n} from '../components/StyledComponents';\nimport { LoadingSpinner } from '../components/LoadingSpinner';\nimport { ErrorMessage } from '../components/ErrorMessage';\nimport { theme } from '../theme';\n\ninterface LineDetailScreenProps {\n  route: any;\n  navigation: any;\n}\n\nexport const LineDetailScreen: React.FC<LineDetailScreenProps> = ({ route, navigation }) => {\n  const { line } = route.params;\n  const { selectedContract } = useAuth();\n  \n  // Buscar produções usando o contrato selecionado e filtrar por linha\n  // Hook fará no-op se contratoId for falsy\n  const { data: allProductions, loading, error } = useProductions(\n    selectedContract?.id || '',\n    { lineId: line.id }\n  );\n\n  // Verificar se um contrato foi selecionado\n  if (!selectedContract) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <ErrorMessage \n          message=\"Nenhum contrato selecionado. Por favor, faça login novamente.\"\n        />\n      </Container>\n    );\n  }\n\n  // Mostrar loading\n  if (loading) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <LoadingSpinner />\n      </Container>\n    );\n  }\n\n  // Mostrar erro\n  if (error) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <ErrorMessage message={error} />\n      </Container>\n    );\n  }\n\n  const lineProductions = allProductions || [];\n  const activeProductions = lineProductions.filter(prod => prod.status === 'EM PRODUCAO');\n  const finishedProductions = lineProductions.filter(prod => prod.status === 'FINALIZADA');\n\n  const ProductionItem = ({ production }: { production: any }) => (\n    <Card style={{ marginBottom: 8 }}>\n      <TouchableOpacity\n        onPress={() => {\n          navigation.navigate('ProductionDetail', {\n            production: production,\n            line: line\n          });\n        }}\n      >\n        <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n          <View style={{ flex: 1 }}>\n            <View style={{ \n              backgroundColor: production.status === 'EM PRODUCAO' ? theme.colors.success : theme.colors.textSecondary,\n              paddingHorizontal: 8,\n              paddingVertical: 4,\n              borderRadius: 4,\n              alignSelf: 'flex-start',\n              marginBottom: 8\n            }}>\n              <Text style={{ \n                color: theme.colors.white,\n                fontSize: 12,\n                fontWeight: 'bold'\n              }}>\n                {line.name}\n              </Text>\n              <Text style={{ \n                color: theme.colors.white,\n                fontSize: 10\n              }}>\n                {production.status}\n              </Text>\n            </View>\n            \n            <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n              Código: <Text style={{ fontWeight: 'normal' }}>{production.productCode}</Text>\n            </Text>\n            \n            <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n              Produto: <Text style={{ fontWeight: 'normal' }}>{production.productName}</Text>\n            </Text>\n            \n            <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n              Técnico: <Text style={{ fontWeight: 'normal' }}>{production.technician}</Text>\n            </Text>\n            \n            <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n              Data início: <Text style={{ fontWeight: 'normal' }}>{production.startDate}</Text>\n            </Text>\n            \n            {production.endDate && (\n              <Text style={{ fontSize: 14, fontWeight: 'bold' }}>\n                Data final: <Text style={{ fontWeight: 'normal' }}>{production.endDate}</Text>\n              </Text>\n            )}\n          </View>\n          \n          <Text style={{ fontSize: 18, color: theme.colors.primary }}>→</Text>\n        </View>\n      </TouchableOpacity>\n    </Card>\n  );\n\n  return (\n    <Container>\n      <ScrollView style={{ padding: 16 }}>\n        {/* Produção Ativa */}\n        {activeProductions.length > 0 && (\n          <View style={{ marginBottom: 24 }}>\n            <Text style={{ \n              fontSize: 16,\n              fontWeight: 'bold',\n              marginBottom: 12,\n              color: theme.colors.text\n            }}>\n              EM PRODUÇÃO\n            </Text>\n            {activeProductions.map((production) => (\n              <ProductionItem key={production.id} production={production} />\n            ))}\n          </View>\n        )}\n\n        {/* Produções Finalizadas */}\n        {finishedProductions.length > 0 && (\n          <View>\n            <Text style={{ \n              fontSize: 16,\n              fontWeight: 'bold',\n              marginBottom: 12,\n              color: theme.colors.text\n            }}>\n              FINALIZADAS\n            </Text>\n            {finishedProductions.map((production) => (\n              <ProductionItem key={production.id} production={production} />\n            ))}\n          </View>\n        )}\n\n        {/* Caso não tenha produções */}\n        {lineProductions.length === 0 && (\n          <View style={{ \n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            paddingTop: 100\n          }}>\n            <Text style={{ \n              fontSize: 16,\n              color: theme.colors.textSecondary,\n              textAlign: 'center'\n            }}>\n              Nenhuma produção encontrada para esta linha\n            </Text>\n          </View>\n        )}\n      </ScrollView>\n    </Container>\n  );\n};","size_bytes":5830},"pcount/src/screens/LinesScreen.tsx":{"content":"import React from 'react';\nimport { FlatList, View, Text } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { useProductionLinesWithFallback } from '../hooks/useMockFallback';\nimport { useAuth } from '../contexts/AuthContext';\nimport {\n  Container,\n  Title,\n  Card,\n  StatusIndicator,\n} from '../components/StyledComponents';\nimport { LoadingSpinner } from '../components/LoadingSpinner';\nimport { ErrorMessage } from '../components/ErrorMessage';\nimport { theme } from '../theme';\n\ninterface LinesScreenProps {\n  navigation: any;\n}\n\nexport const LinesScreen: React.FC<LinesScreenProps> = ({ navigation }) => {\n  const { selectedContract } = useAuth();\n  \n  // Buscar as linhas de produção com fallback automático para mock\n  const { data: productionLines, loading, error } = useProductionLinesWithFallback(\n    selectedContract?.id || ''\n  );\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'produzindo': return 'Produzindo';\n      case 'aguardando': return 'Aguardando';\n      case 'iniciando': return 'Iniciando';\n      default: return status;\n    }\n  };\n\n  // Verificar se um contrato foi selecionado\n  if (!selectedContract) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <ErrorMessage \n          message=\"Nenhum contrato selecionado. Por favor, faça login novamente.\"\n        />\n      </Container>\n    );\n  }\n\n  // Mostrar loading\n  if (loading) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <Title>Carregando Linhas...</Title>\n        <LoadingSpinner />\n      </Container>\n    );\n  }\n\n  // Mostrar erro apenas se não houver dados (fallback pode resolver automaticamente)\n  if (error && !productionLines) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <Title>Selecione uma Linha</Title>\n        <ErrorMessage message={error} />\n      </Container>\n    );\n  }\n\n  // Verificar se existem linhas\n  if (!productionLines || productionLines.length === 0) {\n    return (\n      <Container style={{ padding: 16 }}>\n        <Title>Selecione uma Linha</Title>\n        <Text style={{ textAlign: 'center', marginTop: 32, color: theme.colors.textSecondary }}>\n          Nenhuma linha de produção encontrada para este contrato.\n        </Text>\n      </Container>\n    );\n  }\n\n  return (\n    <Container style={{ padding: 16 }}>\n      <Title>Selecione uma Linha</Title>\n      \n      <View style={{ flexDirection: 'row', marginBottom: 16, alignItems: 'center' }}>\n        <StatusIndicator status=\"iniciando\" />\n        <Text style={{ marginLeft: 8, marginRight: 16 }}>Iniciando</Text>\n        <StatusIndicator status=\"aguardando\" />\n        <Text style={{ marginLeft: 8, marginRight: 16 }}>Aguardando</Text>\n        <StatusIndicator status=\"produzindo\" />\n        <Text style={{ marginLeft: 8 }}>Produzindo</Text>\n      </View>\n      \n      <FlatList\n        data={productionLines}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Card onPress={() => navigation.navigate('LineDetail', { line: item })}>\n            <View style={{ paddingVertical: 8 }}>\n              {/* Header com nome da linha e status */}\n              <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                  <StatusIndicator status={item.status} />\n                  <View style={{\n                    backgroundColor: item.status === 'produzindo' ? theme.colors.success : \n                                   item.status === 'iniciando' ? theme.colors.warning : theme.colors.textSecondary,\n                    marginLeft: 12,\n                    paddingHorizontal: 12,\n                    paddingVertical: 6,\n                    borderRadius: 6\n                  }}>\n                    <Text style={{ \n                      fontSize: 16, \n                      fontWeight: 'bold', \n                      color: theme.colors.white,\n                    }}>\n                      {item.name}\n                    </Text>\n                  </View>\n                </View>\n                <View style={{\n                  backgroundColor: theme.colors.primary,\n                  width: 40,\n                  height: 40,\n                  borderRadius: 8,\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                }}>\n                  <MaterialIcons name=\"arrow-forward\" size={24} color={theme.colors.white} />\n                </View>\n              </View>\n              \n              {/* Informações da máquina */}\n              <View style={{ paddingLeft: 4 }}>\n                <Text style={{ \n                  fontSize: 12, \n                  color: theme.colors.textSecondary,\n                  marginBottom: 4\n                }}>\n                  {item.code}\n                </Text>\n                \n                {item.operator && (\n                  <Text style={{ \n                    fontSize: 12, \n                    color: theme.colors.text,\n                    marginBottom: 2\n                  }}>\n                    👤 {item.operator}\n                  </Text>\n                )}\n                \n                {item.location && (\n                  <Text style={{ \n                    fontSize: 12, \n                    color: theme.colors.text,\n                    marginBottom: 2\n                  }}>\n                    📍 {item.location}\n                  </Text>\n                )}\n                \n                {item.machineType && (\n                  <Text style={{ \n                    fontSize: 12, \n                    color: theme.colors.text,\n                    marginBottom: 2\n                  }}>\n                    ⚙️ {item.machineType}\n                  </Text>\n                )}\n                \n                {item.temperature !== undefined && (\n                  <Text style={{ \n                    fontSize: 12, \n                    color: item.temperature > 150 ? theme.colors.error : \n                           item.temperature > 100 ? theme.colors.warning : theme.colors.text,\n                    marginBottom: 2\n                  }}>\n                    🌡️ {item.temperature}°C\n                  </Text>\n                )}\n                \n                {item.lastMaintenance && (() => {\n                  const date = new Date(item.lastMaintenance);\n                  return !isNaN(date.getTime()) ? (\n                    <Text style={{ \n                      fontSize: 12, \n                      color: theme.colors.text,\n                      marginBottom: 4\n                    }}>\n                      🔧 Manutenção: {date.toLocaleDateString('pt-BR')}\n                    </Text>\n                  ) : null;\n                })()}\n                \n                {/* Produção e eficiência */}\n                <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginTop: 4 }}>\n                  {item.capacity !== undefined && item.currentProduction !== undefined && (\n                    <Text style={{ \n                      fontSize: 12, \n                      color: theme.colors.text,\n                      fontWeight: '600'\n                    }}>\n                      🏭 {item.currentProduction}/{item.capacity} unidades\n                    </Text>\n                  )}\n                  \n                  {item.efficiency !== undefined && (\n                    <Text style={{ \n                      fontSize: 12, \n                      color: item.efficiency > 80 ? theme.colors.success : \n                             item.efficiency > 50 ? theme.colors.warning : theme.colors.error,\n                      fontWeight: '600'\n                    }}>\n                      📊 {item.efficiency.toFixed(1)}%\n                    </Text>\n                  )}\n                </View>\n              </View>\n            </View>\n          </Card>\n        )}\n      />\n    </Container>\n  );\n};","size_bytes":8014},"pcount/src/screens/LoginScreen.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport { Alert, Text, View, TouchableOpacity, Dimensions, KeyboardAvoidingView, ScrollView, Platform } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { useAuth } from '../contexts/AuthContext';\nimport { theme } from '../theme';\nimport styled from 'styled-components/native';\n\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\n\ninterface LoginScreenProps {\n  navigation: any;\n}\n\n// Styled Components\nconst GradientBackground = styled.View`\n  flex: 1;\n`;\n\nconst CurvedOverlay = styled.View`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: transparent;\n  border-top-left-radius: 24px;\n  border-top-right-radius: 24px;\n  margin-top: ${Math.min(screenHeight * 0.08, 80)}px;\n  shadow-color: #000;\n  shadow-offset: 0px -2px;\n  shadow-opacity: 0.1;\n  shadow-radius: 12px;\n  elevation: 8;\n`;\n\nconst LoginCard = styled.View`\n  flex: 1;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${screenWidth * 0.06}px;\n  padding-top: ${Math.max(screenHeight * 0.05, 40)}px;\n`;\n\nconst LogoContainer = styled.View`\n  align-items: center;\n  margin-bottom: ${Math.max(screenHeight * 0.02, 16)}px;\n`;\n\nconst SubTitle = styled.Text`\n  font-size: ${theme.fontSizes.lg}px;\n  color: ${theme.colors.textInverse};\n  text-align: center;\n  margin-top: ${theme.spacing.sm}px;\n  font-weight: 500;\n  opacity: 0.95;\n  letter-spacing: 0.5px;\n  text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\n`;\n\nconst FormContainer = styled.View`\n  width: 100%;\n  max-width: ${Math.min(screenWidth * 0.9, 380)}px;\n  padding: ${screenHeight * 0.02}px ${screenWidth * 0.04}px;\n  margin-bottom: ${Math.max(screenHeight * 0.02, 16)}px;\n`;\n\nconst InputWrapper = styled.View`\n  position: relative;\n  margin-bottom: ${Math.max(screenHeight * 0.015, 12)}px;\n`;\n\nconst StyledInput = styled.TextInput`\n  background-color: transparent;\n  border-width: 1.5px;\n  border-color: rgba(255, 255, 255, 0.3);\n  border-radius: 14px;\n  padding: ${Math.max(screenHeight * 0.018, 14)}px ${screenWidth * 0.04}px ${Math.max(screenHeight * 0.018, 14)}px ${screenWidth * 0.13}px;\n  font-size: ${Math.max(screenWidth * 0.042, 16)}px;\n  color: #ffffff;\n  min-height: ${Math.max(screenHeight * 0.06, 48)}px;\n  shadow-color: #000;\n  shadow-offset: 0px 2px;\n  shadow-opacity: 0.05;\n  shadow-radius: 8px;\n  elevation: 2;\n  font-weight: 500;\n`;\n\nconst InputIconContainer = styled.View`\n  position: absolute;\n  left: ${screenWidth * 0.04}px;\n  top: ${Math.max(screenHeight * 0.018, 14)}px;\n  z-index: 1;\n`;\n\nconst EyeIconContainer = styled.TouchableOpacity`\n  position: absolute;\n  right: ${screenWidth * 0.04}px;\n  top: ${Math.max(screenHeight * 0.012, 10)}px;\n  z-index: 1;\n  padding: ${Math.max(screenWidth * 0.025, 12)}px;\n  border-radius: 20px;\n  min-width: 44px;\n  min-height: 44px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst LoginButton = styled.TouchableOpacity.attrs({\n  activeOpacity: 0.8\n})`\n  padding: ${Math.max(screenHeight * 0.014, 10)}px;\n  align-items: center;\n  min-height: ${Math.max(screenHeight * 0.055, 44)}px;\n  justify-content: center;\n  width: 100%;\n  background-color: transparent;\n`;\n\nconst VersionText = styled.Text`\n  color: rgba(255, 255, 255, 0.7);\n  font-size: ${Math.max(screenWidth * 0.032, 12)}px;\n  font-weight: 500;\n  text-align: center;\n  margin-top: ${Math.max(screenHeight * 0.02, 16)}px;\n`;\n\n\nconst WelcomeText = styled.Text`\n  font-size: ${theme.fontSizes.xs}px;\n  color: ${theme.colors.textSecondary};\n  text-align: center;\n  margin-top: ${theme.spacing.lg}px;\n  line-height: 20px;\n  font-weight: 500;\n  opacity: 0.8;\n`;\n\n// Styled components for bottom action area\nconst BottomActionArea = styled.View`\n  width: 100%;\n  padding: ${screenWidth * 0.04}px;\n  padding-top: ${Math.max(screenHeight * 0.02, 16)}px;\n  padding-bottom: ${Math.max(screenHeight * 0.03, 20)}px;\n  background-color: transparent;\n  border-top-width: 0px;\n  border-top-color: transparent;\n`;\n\nconst ContentArea = styled.View`\n  flex: 1;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [emailFocused, setEmailFocused] = useState(false);\n  const [passwordFocused, setPasswordFocused] = useState(false);\n  const emailRef = useRef<any>(null);\n  const passwordRef = useRef<any>(null);\n  const { login } = useAuth();\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      Alert.alert('Erro', 'Por favor, preencha todos os campos');\n      return;\n    }\n\n    const success = await login(email, password);\n    if (!success) {\n      Alert.alert('Erro', 'Credenciais inválidas');\n    }\n    // Removido navigation.navigate - deixa o AppNavigator controlar automaticamente\n  };\n\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <GradientBackground>\n        <LinearGradient\n          colors={['#4A90E2', '#357ABD', '#2C5F8A']}\n          start={{ x: 0, y: 0 }}\n          end={{ x: 1, y: 1 }}\n          style={{ flex: 1 }}\n        >\n          <CurvedOverlay />\n          <KeyboardAvoidingView \n            style={{ flex: 1 }} \n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n          >\n            <ScrollView \n              contentContainerStyle={{ flexGrow: 1 }}\n              keyboardShouldPersistTaps=\"handled\"\n              showsVerticalScrollIndicator={false}\n            >\n              <LoginCard>\n                <ContentArea>\n        {/* Logo Area */}\n        <LogoContainer style={{ marginTop: Math.max(screenHeight * 0.08, 60) }}>\n          <View style={{ alignItems: 'center', marginBottom: Math.max(screenHeight * 0.03, 24) }}>\n            {/* Main PCOUNT Logo */}\n            <View style={{ \n              flexDirection: 'row', \n              alignItems: 'center', \n              justifyContent: 'center',\n              marginBottom: 8\n            }}>\n              <Text style={{\n                fontSize: Math.min(screenWidth * 0.12, 48),\n                fontWeight: '800',\n                color: 'rgba(255, 255, 255, 0.95)',\n                letterSpacing: 1,\n                textShadowColor: 'rgba(0, 0, 0, 0.2)',\n                textShadowOffset: { width: 0, height: 2 },\n                textShadowRadius: 4\n              }}>\n                PC\n              </Text>\n              <View style={{\n                width: Math.max(screenWidth * 0.1, 40),\n                height: Math.max(screenWidth * 0.1, 40),\n                borderRadius: Math.max(screenWidth * 0.05, 20),\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                alignItems: 'center',\n                justifyContent: 'center',\n                marginHorizontal: screenWidth * 0.01,\n                boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.15)',\n                elevation: 6\n              }}>\n                <MaterialIcons name=\"visibility\" size={Math.max(screenWidth * 0.05, 20)} color=\"#667eea\" />\n              </View>\n              <Text style={{\n                fontSize: Math.min(screenWidth * 0.12, 48),\n                fontWeight: '800',\n                color: 'rgba(255, 255, 255, 0.95)',\n                letterSpacing: 1,\n                textShadowColor: 'rgba(0, 0, 0, 0.2)',\n                textShadowOffset: { width: 0, height: 2 },\n                textShadowRadius: 4\n              }}>\n                UNT\n              </Text>\n            </View>\n          </View>\n        </LogoContainer>\n        \n        <FormContainer>\n          {/* Form Title */}\n          <Text style={{\n            fontSize: Math.max(screenWidth * 0.040, 16),\n            color: '#ffffff',\n            textAlign: 'center',\n            marginBottom: Math.max(screenHeight * 0.02, 16),\n            fontWeight: '600',\n            lineHeight: Math.max(screenWidth * 0.050, 20)\n          }}>\n            Entre com suas credenciais para{'\\n'}acessar o sistema.\n          </Text>\n          \n          {/* Login Form */}\n          <View style={{ width: '100%' }}>\n            {/* Email Input */}\n            <InputWrapper>\n              <View style={{ position: 'relative' }}>\n                <InputIconContainer>\n                  <MaterialIcons name=\"email\" size={Math.max(screenWidth * 0.055, 22)} color=\"#667eea\" />\n                </InputIconContainer>\n                <StyledInput\n                  ref={emailRef}\n                  placeholder=\"Digite seu e-mail\"\n                  value={email}\n                  onChangeText={setEmail}\n                  autoCapitalize=\"none\"\n                  keyboardType=\"email-address\"\n                  textContentType=\"emailAddress\"\n                  autoComplete=\"email\"\n                  returnKeyType=\"next\"\n                  blurOnSubmit={false}\n                  placeholderTextColor=\"rgba(255, 255, 255, 0.7)\"\n                  onFocus={() => setEmailFocused(true)}\n                  onBlur={() => setEmailFocused(false)}\n                  onSubmitEditing={() => passwordRef.current?.focus()}\n                  style={emailFocused ? {\n                    borderColor: '#667eea',\n                    borderWidth: 2,\n                    backgroundColor: 'rgba(255, 255, 255, 1)',\n                    shadowOpacity: 0.1\n                  } : {}}\n                />\n              </View>\n            </InputWrapper>\n            \n            {/* Password Input */}\n            <InputWrapper>\n              <View style={{ position: 'relative' }}>\n                <InputIconContainer>\n                  <MaterialIcons name=\"lock\" size={Math.max(screenWidth * 0.055, 22)} color=\"#667eea\" />\n                </InputIconContainer>\n                <StyledInput\n                  ref={passwordRef}\n                  placeholder=\"Digite sua senha\"\n                  value={password}\n                  onChangeText={setPassword}\n                  secureTextEntry={!showPassword}\n                  textContentType=\"password\"\n                  autoComplete=\"current-password\"\n                  returnKeyType=\"go\"\n                  placeholderTextColor=\"rgba(255, 255, 255, 0.7)\"\n                  onFocus={() => setPasswordFocused(true)}\n                  onBlur={() => setPasswordFocused(false)}\n                  onSubmitEditing={handleLogin}\n                  style={passwordFocused ? {\n                    borderColor: '#667eea',\n                    borderWidth: 2,\n                    backgroundColor: 'rgba(255, 255, 255, 1)',\n                    shadowOpacity: 0.1\n                  } : {}}\n                />\n                <EyeIconContainer onPress={() => setShowPassword(!showPassword)}>\n                  <MaterialIcons \n                    name={showPassword ? \"visibility\" : \"visibility-off\"} \n                    size={Math.max(screenWidth * 0.055, 22)} \n                    color=\"#667eea\" \n                  />\n                </EyeIconContainer>\n              </View>\n            </InputWrapper>\n          </View>\n          \n        </FormContainer>\n        </ContentArea>\n\n        {/* Bottom Action Area */}\n        <BottomActionArea>\n          {/* Login Button */}\n          <LinearGradient\n            colors={['#4A90E2', '#357ABD']}\n            start={{ x: 0, y: 0 }}\n            end={{ x: 1, y: 0 }}\n            style={{\n              borderRadius: 14,\n              marginTop: Math.max(screenHeight * 0.015, 12),\n              shadowColor: '#667eea',\n              shadowOffset: { width: 0, height: 6 },\n              shadowOpacity: 0.25,\n              shadowRadius: 12,\n              elevation: 6,\n            }}\n          >\n            <LoginButton onPress={handleLogin}>\n              <Text style={{\n                color: 'white',\n                fontSize: Math.max(screenWidth * 0.045, 18),\n                fontWeight: '700',\n                letterSpacing: 0.5\n              }}>\n                Entrar\n              </Text>\n            </LoginButton>\n          </LinearGradient>\n          \n          {/* Version */}\n          <VersionText>v2.0.0</VersionText>\n        </BottomActionArea>\n      </LoginCard>\n            </ScrollView>\n          </KeyboardAvoidingView>\n        </LinearGradient>\n      </GradientBackground>\n    </SafeAreaView>\n  );\n};","size_bytes":12386},"pcount/src/screens/ProductionDetailScreen.tsx":{"content":"import React from 'react';\nimport { ScrollView, View, Text } from 'react-native';\nimport {\n  Container,\n  Card,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\ninterface ProductionDetailScreenProps {\n  route: any;\n  navigation: any;\n}\n\nexport const ProductionDetailScreen: React.FC<ProductionDetailScreenProps> = ({ route }) => {\n  const { production, line } = route.params;\n\n  // Função para formatar datas corretamente\n  const formatDate = (dateStr: string) => {\n    if (!dateStr) return '-';\n    \n    // Verifica se a data já está no formato brasileiro (DD/MM/YYYY - HH:MM)\n    if (dateStr.includes(' - ')) {\n      return dateStr.split(' - ')[0];\n    }\n    \n    // Se for ISO timestamp, converte para formato brasileiro\n    try {\n      const date = new Date(dateStr);\n      if (isNaN(date.getTime())) {\n        return dateStr;\n      }\n      return date.toLocaleDateString('pt-BR');\n    } catch {\n      return dateStr;\n    }\n  };\n\n  const formatTime = (dateStr: string) => {\n    if (!dateStr) return '-';\n    \n    // Verifica se a data já está no formato brasileiro (DD/MM/YYYY - HH:MM)\n    if (dateStr.includes(' - ')) {\n      return dateStr.split(' - ')[1];\n    }\n    \n    // Se for ISO timestamp, converte para formato de hora\n    try {\n      const date = new Date(dateStr);\n      if (isNaN(date.getTime())) {\n        return '-';\n      }\n      return date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n    } catch {\n      return '-';\n    }\n  };\n\n  // Verificar se temos dados reais ou usar demonstrativos\n  const hasRealData = production.totalProduced !== undefined && production.totalProduced !== null;\n  const totalProduced = hasRealData ? production.totalProduced : 2390;\n  const avgPerHour = production.avgPerHour ?? (hasRealData ? 0 : 3.66);\n  const avgGeneral = production.avgGeneral ?? 0;\n  \n  // Dados de produção por hora - usar os dados da produção se disponível, senão usar demonstrativos\n  const hasRealHourlyData = production.hourlyData && Array.isArray(production.hourlyData);\n  const hourlyData = hasRealHourlyData ? production.hourlyData : [\n    80, 1, 0, 0, 0, 1, 128, 138, 140, 155, 142, 130,\n    117, 123, 136, 117, 130, 127, 124, 134, 121, 126, 127, 93\n  ];\n\n  return (\n    <Container>\n      <ScrollView style={{ padding: 16 }}>\n        <Card style={{ marginBottom: 16 }}>\n          <View style={{ marginBottom: 12 }}>\n            <View style={{ \n              backgroundColor: production.status === 'EM PRODUCAO' ? theme.colors.success : theme.colors.textSecondary,\n              paddingHorizontal: 12,\n              paddingVertical: 8,\n              borderRadius: 8,\n              alignSelf: 'flex-start',\n              marginBottom: 16\n            }}>\n              <Text style={{ \n                color: theme.colors.white,\n                fontSize: 14,\n                fontWeight: 'bold'\n              }}>\n                Produção\n              </Text>\n              <Text style={{ \n                color: theme.colors.white,\n                fontSize: 12,\n                fontWeight: 'bold'\n              }}>\n                {line.name} {production.status}\n              </Text>\n            </View>\n\n            {/* Operador (início produção) */}\n            <View style={{ \n              backgroundColor: theme.colors.surface,\n              padding: 12,\n              borderRadius: 8,\n              marginBottom: 12\n            }}>\n              <Text style={{ \n                fontSize: 14,\n                fontWeight: 'bold',\n                color: theme.colors.text,\n                marginBottom: 4\n              }}>\n                Operador (início produção)\n              </Text>\n              <Text style={{ \n                fontSize: 14,\n                color: theme.colors.text\n              }}>\n                {production.technician}\n              </Text>\n            </View>\n\n            {/* Linha de produção e Código da linha */}\n            <View style={{ \n              flexDirection: 'row',\n              marginBottom: 12\n            }}>\n              <View style={{ \n                flex: 1,\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8,\n                marginRight: 6\n              }}>\n                <Text style={{ \n                  fontSize: 14,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Linha de produção\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: theme.colors.text\n                }}>\n                  {line.name}\n                </Text>\n              </View>\n              <View style={{ \n                flex: 1,\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8,\n                marginLeft: 6\n              }}>\n                <Text style={{ \n                  fontSize: 14,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Código da linha\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: theme.colors.text\n                }}>\n                  {line.code}\n                </Text>\n              </View>\n            </View>\n\n            {/* Produto */}\n            <View style={{ \n              backgroundColor: theme.colors.surface,\n              padding: 12,\n              borderRadius: 8,\n              marginBottom: 12\n            }}>\n              <Text style={{ \n                fontSize: 14,\n                fontWeight: 'bold',\n                color: theme.colors.text,\n                marginBottom: 4\n              }}>\n                Produto\n              </Text>\n              <Text style={{ \n                fontSize: 14,\n                color: theme.colors.text\n              }}>\n                {production.productName}\n              </Text>\n            </View>\n\n            {/* Cabeçalho dos dados de produção */}\n            <View style={{ \n              flexDirection: 'row', \n              justifyContent: 'space-between', \n              alignItems: 'center',\n              marginBottom: 8\n            }}>\n              <Text style={{ \n                fontSize: 14,\n                fontWeight: 'bold',\n                color: theme.colors.text\n              }}>\n                Estatísticas de Produção\n              </Text>\n              {!hasRealData && (\n                <Text style={{ \n                  fontSize: 10,\n                  color: theme.colors.textSecondary,\n                  fontStyle: 'italic'\n                }}>\n                  Dados demonstrativos\n                </Text>\n              )}\n            </View>\n\n            {/* Dados de produção em grid */}\n            <View style={{ \n              flexDirection: 'row',\n              flexWrap: 'wrap',\n              marginBottom: 12\n            }}>\n              <View style={{ \n                width: '33.33%',\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8,\n                marginRight: '1%',\n                marginBottom: 8\n              }}>\n                <Text style={{ \n                  fontSize: 12,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Data prod.\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: theme.colors.text\n                }}>\n                  {formatDate(production.startDate)}\n                </Text>\n              </View>\n              \n              <View style={{ \n                width: '33.33%',\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8,\n                marginRight: '1%',\n                marginBottom: 8\n              }}>\n                <Text style={{ \n                  fontSize: 12,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Hora início\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: theme.colors.text\n                }}>\n                  {formatTime(production.startDate)}\n                </Text>\n              </View>\n              \n              <View style={{ \n                width: '32.33%',\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8,\n                marginBottom: 8\n              }}>\n                <Text style={{ \n                  fontSize: 12,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Hora final\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: theme.colors.text\n                }}>\n                  {production.endDate ? formatTime(production.endDate) : '-'}\n                </Text>\n              </View>\n              \n              <View style={{ \n                width: '33.33%',\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8,\n                marginRight: '1%'\n              }}>\n                <Text style={{ \n                  fontSize: 12,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Total prod.\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: hasRealData ? theme.colors.text : theme.colors.textSecondary\n                }}>\n                  {totalProduced}\n                </Text>\n              </View>\n              \n              <View style={{ \n                width: '33.33%',\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8,\n                marginRight: '1%'\n              }}>\n                <Text style={{ \n                  fontSize: 12,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Média / hr\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: hasRealData ? theme.colors.text : theme.colors.textSecondary\n                }}>\n                  {avgPerHour}\n                </Text>\n              </View>\n              \n              <View style={{ \n                width: '32.33%',\n                backgroundColor: theme.colors.surface,\n                padding: 12,\n                borderRadius: 8\n              }}>\n                <Text style={{ \n                  fontSize: 12,\n                  fontWeight: 'bold',\n                  color: theme.colors.text,\n                  marginBottom: 4\n                }}>\n                  Média /\n                </Text>\n                <Text style={{ \n                  fontSize: 14,\n                  color: theme.colors.text\n                }}>\n                  {avgGeneral}\n                </Text>\n              </View>\n            </View>\n\n            {/* Produção por hora */}\n            <View style={{ \n              backgroundColor: theme.colors.surface,\n              padding: 12,\n              borderRadius: 8\n            }}>\n              <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n                <Text style={{ \n                  fontSize: 14,\n                  fontWeight: 'bold',\n                  color: theme.colors.text\n                }}>\n                  Produção / hora\n                </Text>\n                {!hasRealHourlyData && (\n                  <Text style={{ \n                    fontSize: 10,\n                    color: theme.colors.textSecondary,\n                    fontStyle: 'italic'\n                  }}>\n                    Dados demonstrativos\n                  </Text>\n                )}\n              </View>\n              \n              {/* Grid de horas - Primeira linha */}\n              <View style={{ flexDirection: 'row', marginBottom: 8 }}>\n                {Array.from({ length: 12 }, (_, i) => (\n                  <View key={i} style={{ \n                    flex: 1,\n                    backgroundColor: theme.colors.primary,\n                    margin: 1,\n                    paddingVertical: 6,\n                    alignItems: 'center',\n                    borderRadius: 4\n                  }}>\n                    <Text style={{ \n                      color: theme.colors.white,\n                      fontSize: 12,\n                      fontWeight: 'bold'\n                    }}>\n                      {i}\n                    </Text>\n                  </View>\n                ))}\n              </View>\n              \n              {/* Valores da primeira linha */}\n              <View style={{ flexDirection: 'row', marginBottom: 8 }}>\n                {hourlyData.slice(0, 12).map((value: number, i: number) => (\n                  <View key={i} style={{ \n                    flex: 1,\n                    margin: 1,\n                    paddingVertical: 4,\n                    alignItems: 'center'\n                  }}>\n                    <Text style={{ \n                      color: theme.colors.text,\n                      fontSize: 11\n                    }}>\n                      {value}\n                    </Text>\n                  </View>\n                ))}\n              </View>\n              \n              {/* Grid de horas - Segunda linha */}\n              <View style={{ flexDirection: 'row', marginBottom: 8 }}>\n                {Array.from({ length: 12 }, (_, i) => (\n                  <View key={i + 12} style={{ \n                    flex: 1,\n                    backgroundColor: theme.colors.primary,\n                    margin: 1,\n                    paddingVertical: 6,\n                    alignItems: 'center',\n                    borderRadius: 4\n                  }}>\n                    <Text style={{ \n                      color: theme.colors.white,\n                      fontSize: 12,\n                      fontWeight: 'bold'\n                    }}>\n                      {i + 12}\n                    </Text>\n                  </View>\n                ))}\n              </View>\n              \n              {/* Valores da segunda linha */}\n              <View style={{ flexDirection: 'row' }}>\n                {hourlyData.slice(12, 24).map((value: number, i: number) => (\n                  <View key={i + 12} style={{ \n                    flex: 1,\n                    margin: 1,\n                    paddingVertical: 4,\n                    alignItems: 'center'\n                  }}>\n                    <Text style={{ \n                      color: theme.colors.text,\n                      fontSize: 11\n                    }}>\n                      {value}\n                    </Text>\n                  </View>\n                ))}\n              </View>\n            </View>\n          </View>\n        </Card>\n      </ScrollView>\n    </Container>\n  );\n};","size_bytes":15464},"pcount/src/screens/ProductionScreen.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  Container,\n  CenteredContainer,\n  Title,\n  Button,\n  ButtonText,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\nexport const ProductionScreen: React.FC = () => {\n  return (\n    <Container>\n      <CenteredContainer>\n        <View style={{ alignItems: 'center' }}>\n          <Text style={{ fontSize: 24, marginBottom: 16 }}>📷</Text>\n          <Text style={{ \n            fontSize: 20, \n            fontWeight: 'bold', \n            backgroundColor: theme.colors.primary,\n            color: theme.colors.white,\n            paddingHorizontal: 12,\n            paddingVertical: 6,\n            borderRadius: 8\n          }}>\n            SCAN ME!\n          </Text>\n        </View>\n        \n        <Title>Selecione uma Produção</Title>\n        \n        <Text style={{ \n          textAlign: 'center', \n          color: theme.colors.text,\n          fontSize: 16,\n          marginBottom: 32\n        }}>\n          Não há produção aberta para o dispositivo\n        </Text>\n        \n        <Button>\n          <ButtonText>📱 Escanear QR Code</ButtonText>\n        </Button>\n      </CenteredContainer>\n    </Container>\n  );\n};","size_bytes":1229},"pcount/src/services/api.ts":{"content":"import { API_CONFIG } from '../config/api';\nimport { tokenStorage } from './tokenStorage';\n\n// Interface para gerenciar o contrato ativo\ninterface ContractManager {\n  getActiveContractId(): string | null;\n  setActiveContractId(contractId: string | null): void;\n}\n\n// Singleton para gerenciar o contrato ativo\nclass ContractManagerImpl implements ContractManager {\n  private activeContractId: string | null = null;\n\n  getActiveContractId(): string | null {\n    return this.activeContractId;\n  }\n\n  setActiveContractId(contractId: string | null): void {\n    this.activeContractId = contractId;\n  }\n}\n\nexport const contractManager = new ContractManagerImpl();\n\n// API Base Service\nexport class ApiService {\n  private baseURLV1: string;\n  private baseURLV2: string;\n  \n  constructor() {\n    this.baseURLV1 = API_CONFIG.BASE_URL_V1;\n    this.baseURLV2 = API_CONFIG.BASE_URL_V2;\n  }\n\n  /**\n   * Determina qual versão da API usar baseada no endpoint\n   * V2: Apenas autenticação\n   * V1: Todos os outros endpoints conforme documentação Swagger\n   */\n  private getBaseURL(endpoint: string): string {\n    // Apenas autenticação usa V2 conforme documentação Swagger\n    if (endpoint.includes('/Account/')) {\n      return this.baseURLV2;\n    }\n    // Todos os outros endpoints usam V1\n    return this.baseURLV1;\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const baseURL = this.getBaseURL(endpoint);\n    const url = `${baseURL}${endpoint}`;\n    \n    // Recupera token para autenticação\n    const token = await tokenStorage.getToken();\n    \n    // Controller para timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.TIMEOUT);\n    \n    // Obter contractId do contractManager ou do storage como fallback\n    let activeContractId = contractManager.getActiveContractId();\n    if (!activeContractId) {\n      try {\n        activeContractId = await tokenStorage.getContractId();\n        // Se encontrou no storage, atualizar o contractManager também\n        if (activeContractId) {\n          contractManager.setActiveContractId(activeContractId);\n        }\n      } catch (error) {\n        console.warn('Erro ao recuperar contractId do storage:', error);\n      }\n    }\n    \n    // Obter UUID único do dispositivo para EquipamentoId\n    const deviceUUID = await tokenStorage.getDeviceUUID();\n\n    const config: RequestInit = {\n      ...options,\n      signal: controller.signal,\n      headers: {\n        ...API_CONFIG.DEFAULT_HEADERS,\n        ...(token && { 'Authorization': `Bearer ${token}` }),\n        // Usar UUID único do dispositivo como EquipamentoId\n        'EquipamentoId': deviceUUID,\n        ...options.headers,\n      },\n    };\n\n\n    try {\n      const response = await fetch(url, config);\n      \n      // Limpa timeout se request completou\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          // Token expirado, tentar refresh\n          const refreshed = await this.tryRefreshToken();\n          if (refreshed) {\n            // Retry request com novo token\n            return this.request(endpoint, options);\n          } else {\n            // Redirect to login\n            await tokenStorage.clearTokens();\n            throw new Error('Sessão expirada');\n          }\n        }\n        \n        // Tentar ler mensagem de erro detalhada do servidor\n        let errorMessage = `HTTP error! status: ${response.status}`;\n        try {\n          const errorBody = await response.json();\n          if (errorBody.message || errorBody.error) {\n            errorMessage += ` - ${errorBody.message || errorBody.error}`;\n          }\n          console.error('API Error Details:', errorBody);\n        } catch (parseError) {\n          // Se não conseguir fazer parse do JSON, usar mensagem padrão\n          console.error('Could not parse error response:', parseError);\n        }\n        \n        throw new Error(errorMessage);\n      }\n      \n      // Handle 204 No Content\n      if (response.status === 204) {\n        return null as T;\n      }\n      \n      const data = await response.json();\n      return data;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      \n      console.error(`API request failed: ${url}`, error);\n      throw error;\n    }\n  }\n\n  private async tryRefreshToken(): Promise<boolean> {\n    try {\n      const refreshToken = await tokenStorage.getRefreshToken();\n      if (!refreshToken) return false;\n\n      const response = await fetch(`${this.baseURLV2}/Account/Refresh`, {\n        method: 'POST',\n        headers: API_CONFIG.DEFAULT_HEADERS,\n        body: JSON.stringify({ refresh_token: refreshToken }),\n      });\n\n      if (!response.ok) return false;\n\n      const data = await response.json();\n      if (data.token) {\n        await tokenStorage.setToken(data.token);\n        if (data.refreshToken) {\n          await tokenStorage.setRefreshToken(data.refreshToken);\n        }\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      return false;\n    }\n  }\n\n  // Métodos HTTP\n  async get<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, { method: 'GET' });\n  }\n\n  async post<T>(endpoint: string, data?: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async put<T>(endpoint: string, data: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, { method: 'DELETE' });\n  }\n}\n\nexport const apiService = new ApiService();","size_bytes":5914},"pcount/src/services/authService.ts":{"content":"import { User } from '../types';\nimport { apiService } from './api';\nimport { tokenStorage } from './tokenStorage';\nimport { API_ENDPOINTS_COMPAT as API_ENDPOINTS } from '../config/api';\n\nexport interface LoginRequest {\n  Email: string;\n  Senha: string;\n}\n\nexport interface LoginResponse {\n  access_token?: string;\n  token_type?: string;\n  refresh_token?: string;\n  expires_in?: number;\n  contratos?: Array<{\n    contratoId: string;\n    usuarioId: string;\n    contratoRazaoSocial?: string;\n    contratoNomeFantasia?: string;\n    usuarioEmail?: string;\n    usuarioNome?: string;\n    usuarioCargo?: string;\n    urlImage?: string;\n    usuarioGrupo: number;\n    isRomaneio: boolean;\n  }>;\n}\n\nexport class AuthService {\n  // Login do usuário\n  async login(email: string, senha: string): Promise<LoginResponse> {\n    try {\n      const response = await apiService.post<LoginResponse>(\n        API_ENDPOINTS.AUTH.LOGIN,\n        {\n          Email: email,\n          Senha: senha,\n        }\n      );\n      \n      // Armazenar tokens e informações do usuário\n      if (response.access_token) {\n        await tokenStorage.setToken(response.access_token);\n        if (response.refresh_token) {\n          await tokenStorage.setRefreshToken(response.refresh_token);\n        }\n        \n        // Armazenar informações do usuário do primeiro contrato\n        if (response.contratos && response.contratos.length > 0) {\n          const firstContract = response.contratos[0];\n          const userInfo = {\n            id: firstContract.usuarioId,\n            name: firstContract.usuarioNome || email,\n            email: firstContract.usuarioEmail || email,\n            role: 'admin' // Assumir admin por padrão\n          };\n          await tokenStorage.setUserInfo(userInfo);\n        }\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Logout do usuário\n  async logout(): Promise<void> {\n    try {\n      // A API PCount pode não ter endpoint específico de logout\n      // Apenas limpar dados locais\n      await tokenStorage.clearTokens();\n    } catch (error) {\n      console.error('Logout error:', error);\n      await tokenStorage.clearTokens();\n    }\n  }\n\n  // Renovar token de autenticação\n  async refreshToken(): Promise<boolean> {\n    try {\n      const refreshToken = await tokenStorage.getRefreshToken();\n      if (!refreshToken) return false;\n\n      const response = await apiService.post<LoginResponse>(\n        API_ENDPOINTS.AUTH.REFRESH,\n        { refresh_token: refreshToken }\n      );\n\n      if (response.access_token) {\n        await tokenStorage.setToken(response.access_token);\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      return false;\n    }\n  }\n\n  // Verificar se o usuário está autenticado usando dados reais armazenados\n  async validateToken(): Promise<User | null> {\n    try {\n      const token = await tokenStorage.getToken();\n      if (!token) return null;\n      \n      // Recuperar informações reais do usuário armazenadas durante o login\n      const userInfo = await tokenStorage.getUserInfo();\n      if (userInfo) {\n        return {\n          id: userInfo.id,\n          name: userInfo.name,\n          email: userInfo.email,\n          password: '',\n          role: userInfo.role || 'admin'\n        };\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return null;\n    }\n  }\n}\n\nexport const authService = new AuthService();","size_bytes":3583},"pcount/src/services/contractService.ts":{"content":"import { Contract } from '../types';\nimport { apiService } from './api';\nimport { API_ENDPOINTS_COMPAT as API_ENDPOINTS } from '../config/api';\n\nexport interface ContratoDto {\n  id: string;\n  nome: string;\n  empresa: string;\n}\n\nexport class ContractService {\n  // Buscar todos os contratos\n  async getContracts(): Promise<Contract[]> {\n    try {\n      const response = await apiService.get<ContratoDto[]>(API_ENDPOINTS.CONTRACTS);\n      \n      // Mapear a resposta da API para o formato esperado pelo app\n      return response.map(contrato => ({\n        id: contrato.id,\n        name: contrato.nome,\n        company: contrato.empresa,\n      }));\n    } catch (error) {\n      console.error('Get contracts error:', error);\n      throw error;\n    }\n  }\n\n  // Buscar contrato por ID (não disponível na API atual, usar o array de contratos)\n  async getContractById(id: string): Promise<Contract> {\n    try {\n      const contracts = await this.getContracts();\n      const contract = contracts.find(c => c.id === id);\n      \n      if (!contract) {\n        throw new Error(`Contrato com ID ${id} não encontrado`);\n      }\n      \n      return contract;\n    } catch (error) {\n      console.error('Get contract by ID error:', error);\n      throw error;\n    }\n  }\n\n  // As operações de CRUD não estão disponíveis na API atual\n  // Mantendo os métodos para compatibilidade, mas retornando erro\n  async createContract(contract: Omit<Contract, 'id'>): Promise<Contract> {\n    throw new Error('Operação de criação de contrato não disponível na API atual');\n  }\n\n  async updateContract(id: string, contract: Partial<Contract>): Promise<Contract> {\n    throw new Error('Operação de atualização de contrato não disponível na API atual');\n  }\n\n  async deleteContract(id: string): Promise<void> {\n    throw new Error('Operação de exclusão de contrato não disponível na API atual');\n  }\n}\n\nexport const contractService = new ContractService();","size_bytes":1946},"pcount/src/services/productService.ts":{"content":"import { apiService } from './api';\nimport { API_ENDPOINTS_COMPAT as API_ENDPOINTS } from '../config/api';\n\nexport interface ProdutoDto {\n  id: string;\n  codigo: string;\n  nome: string;\n  descricao?: string;\n}\n\nexport interface FormacaoPaleteDto {\n  id: string;\n  produto: {\n    codigo: string;\n    nome: string;\n  };\n  quantidadePorPalete: number;\n}\n\nexport class ProductService {\n  // Buscar todos os produtos\n  async getProducts(contratoId: string): Promise<ProdutoDto[]> {\n    try {\n      const response = await apiService.get<ProdutoDto[]>(\n        API_ENDPOINTS.PRODUTOS(contratoId)\n      );\n      \n      return response;\n    } catch (error) {\n      console.error('Get products error:', error);\n      throw error;\n    }\n  }\n\n  // Buscar formação de paletes\n  async getFormacaoPalete(contratoId: string): Promise<FormacaoPaleteDto[]> {\n    try {\n      const response = await apiService.get<FormacaoPaleteDto[]>(\n        API_ENDPOINTS.FORMACAO_PALETE(contratoId)\n      );\n      \n      return response;\n    } catch (error) {\n      console.error('Get formação palete error:', error);\n      throw error;\n    }\n  }\n\n  // Buscar produto por código\n  async getProductByCode(contratoId: string, codigo: string): Promise<ProdutoDto | null> {\n    try {\n      const products = await this.getProducts(contratoId);\n      return products.find(p => p.codigo === codigo) || null;\n    } catch (error) {\n      console.error('Get product by code error:', error);\n      throw error;\n    }\n  }\n}\n\nexport const productService = new ProductService();","size_bytes":1537},"pcount/src/services/productionLineService.ts":{"content":"import { ProductionLine } from '../types';\nimport { apiService } from './api';\nimport { API_ENDPOINTS_COMPAT as API_ENDPOINTS } from '../config/api';\n\nexport interface CircuitoLinhaDto {\n  id: string;\n  descricao: string;\n  tag: string;\n  machineKey: string;\n  statusProducaoCodigo: number;\n  statusProducaoDescricao: string;\n  isManualStartOP: boolean;\n  isFilaStartOP: boolean;\n}\n\nexport class ProductionLineService {\n  // Buscar todas as linhas de produção por contrato\n  async getProductionLines(contratoId: string): Promise<ProductionLine[]> {\n    try {\n      const response = await apiService.get<CircuitoLinhaDto[]>(\n        API_ENDPOINTS.CIRCUITOS(contratoId)\n      );\n      \n      if (!response || !Array.isArray(response)) {\n        return [];\n      }\n      \n      // Mapear a resposta da API para o formato esperado pelo app\n      return response.map(circuito => ({\n        id: circuito.id,\n        name: circuito.tag, // Usar 'tag' como nome da linha (ex: P1-MQA5)\n        code: circuito.machineKey, // Usar 'machineKey' como código da máquina\n        status: this.mapStatus(circuito.statusProducaoDescricao), // Usar status em texto\n        // Dados adicionais das máquinas reais da API\n        operator: circuito.descricao.includes('Guaravita') ? 'Operador Guaravita' : 'Operador',\n        location: `Setor - ${circuito.tag}`,\n        machineType: circuito.tag.includes('MQA') ? 'Injetora MQA' : \n                    circuito.tag.includes('MQM') ? 'Injetora MQM' : 'Injetora',\n      }));\n    } catch (error) {\n      console.error('Get production lines error:', error);\n      throw error;\n    }\n  }\n\n  private mapStatus(apiStatus: string): ProductionLine['status'] {\n    // Mapear status da API para os status esperados pelo app\n    switch (apiStatus?.toLowerCase()) {\n      case 'produzindo':\n      case 'producao':\n      case 'running':\n        return 'produzindo';\n      case 'aguardando':\n      case 'waiting':\n      case 'parado':\n        return 'aguardando';\n      case 'iniciando':\n      case 'starting':\n        return 'iniciando';\n      default:\n        return 'aguardando';\n    }\n  }\n\n  // Buscar linhas de produção por contrato (método alternativo - mesmo que getProductionLines)\n  async getProductionLinesByContract(contractId: string): Promise<ProductionLine[]> {\n    return this.getProductionLines(contractId);\n  }\n\n  // Buscar linha de produção por ID\n  async getProductionLineById(id: string, contratoId: string): Promise<ProductionLine> {\n    try {\n      const lines = await this.getProductionLines(contratoId);\n      const line = lines.find(l => l.id === id);\n      \n      if (!line) {\n        throw new Error(`Linha de produção com ID ${id} não encontrada`);\n      }\n      \n      return line;\n    } catch (error) {\n      console.error('Get production line by ID error:', error);\n      throw error;\n    }\n  }\n\n  // As operações de atualização e criação não estão disponíveis na API atual\n  // Mantendo os métodos para compatibilidade, mas retornando erro\n  async updateLineStatus(id: string, status: ProductionLine['status']): Promise<ProductionLine> {\n    throw new Error('Operação de atualização de status não disponível na API atual');\n  }\n\n  async createProductionLine(line: Omit<ProductionLine, 'id'>): Promise<ProductionLine> {\n    throw new Error('Operação de criação de linha de produção não disponível na API atual');\n  }\n}\n\nexport const productionLineService = new ProductionLineService();","size_bytes":3467},"pcount/src/services/productionService.ts":{"content":"import { Production, ProductionStats, DashboardResponseDto } from '../types';\nimport { apiService } from './api';\nimport { API_ENDPOINTS_COMPAT as API_ENDPOINTS, API_CONFIG, API_ENDPOINTS as API_ENDPOINTS_V1 } from '../config/api';\nimport { tokenStorage } from '../services/tokenStorage';\n\nexport interface ProductionFilters {\n  lineId?: string;\n  status?: Production['status'];\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface ProducaoDetalhadaDto {\n  id: string;\n  circuitoId: string;\n  produto: {\n    codigo: string;\n    nome: string;\n  };\n  tecnico: string;\n  dataInicio: string;\n  dataFim?: string;\n  status: string;\n}\n\nexport interface ProducaoLinhaCircuitoDto {\n  id: string;\n  circuitoId: string;\n  produto: {\n    codigo: string;\n    nome: string;\n  };\n  tecnico: string;\n  dataInicio: string;\n  dataFim?: string;\n  status: string;\n}\n\n\nexport class ProductionService {\n  // Buscar produções em andamento\n  async getProductions(contratoId: string, filters?: ProductionFilters): Promise<Production[]> {\n    try {\n      let productions: Production[];\n      \n      // Se filtro de linha foi especificado, usar endpoint específico\n      if (filters?.lineId) {\n        const response = await apiService.get<ProducaoLinhaCircuitoDto[]>(\n          API_ENDPOINTS.PRODUCTIONS.GET_BY_CIRCUITO(contratoId, filters.lineId)\n        );\n        productions = response.map(producao => this.mapProducaoToProduction(producao));\n      } else {\n        // Usar endpoint geral para produções em andamento\n        const response = await apiService.get<ProducaoLinhaCircuitoDto[]>(\n          API_ENDPOINTS.PRODUCTIONS.GET_EM_ANDAMENTO(contratoId)\n        );\n        productions = response.map(producao => this.mapProducaoToProduction(producao));\n      }\n      \n      // Aplicar filtros do lado cliente se necessário\n      if (filters?.status) {\n        productions = productions.filter(p => p.status === filters.status);\n      }\n      \n      if (filters?.startDate || filters?.endDate) {\n        productions = productions.filter(p => {\n          if (filters.startDate && p.startDate < filters.startDate) {\n            return false;\n          }\n          if (filters.endDate && p.endDate && p.endDate > filters.endDate) {\n            return false;\n          }\n          return true;\n        });\n      }\n      \n      return productions;\n    } catch (error) {\n      console.error('Get productions error:', error);\n      throw error;\n    }\n  }\n\n  private mapProducaoToProduction(producao: ProducaoLinhaCircuitoDto | ProducaoDetalhadaDto): Production {\n    return {\n      id: producao.id,\n      lineId: producao.circuitoId,\n      productCode: producao.produto.codigo,\n      productName: producao.produto.nome,\n      technician: producao.tecnico,\n      startDate: producao.dataInicio,\n      endDate: producao.dataFim,\n      status: this.mapStatus(producao.status),\n    };\n  }\n\n  private mapStatus(apiStatus: string): Production['status'] {\n    switch (apiStatus?.toLowerCase()) {\n      case 'em producao':\n      case 'em_producao':\n      case 'produzindo':\n        return 'EM PRODUCAO';\n      case 'finalizada':\n      case 'finalizado':\n      case 'concluida':\n        return 'FINALIZADA';\n      default:\n        return 'EM PRODUCAO';\n    }\n  }\n\n  // Buscar produções por linha (circuito)\n  async getProductionsByLine(contratoId: string, circuitoId: string): Promise<Production[]> {\n    try {\n      const response = await apiService.get<ProducaoLinhaCircuitoDto[]>(\n        API_ENDPOINTS.PRODUCTIONS.GET_BY_CIRCUITO(contratoId, circuitoId)\n      );\n      \n      return response.map(producao => this.mapProducaoToProduction(producao));\n    } catch (error) {\n      console.error('Get productions by line error:', error);\n      throw error;\n    }\n  }\n\n  // Buscar produção por ID\n  async getProductionById(contratoId: string, id: string): Promise<Production> {\n    try {\n      const response = await apiService.get<ProducaoDetalhadaDto>(\n        API_ENDPOINTS.PRODUCTIONS.GET(contratoId, id)\n      );\n      \n      return this.mapProducaoToProduction(response);\n    } catch (error) {\n      console.error('Get production by ID error:', error);\n      throw error;\n    }\n  }\n\n  // Iniciar nova produção\n  async createProduction(contratoId: string, producaoData: any): Promise<Production> {\n    try {\n      const response = await apiService.post<ProducaoDetalhadaDto>(\n        API_ENDPOINTS.PRODUCTIONS.INICIAR(contratoId), \n        producaoData\n      );\n      \n      return this.mapProducaoToProduction(response);\n    } catch (error) {\n      console.error('Create production error:', error);\n      throw error;\n    }\n  }\n\n  // Atualizar produção\n  async updateProduction(contratoId: string, producaoData: any): Promise<Production> {\n    try {\n      const response = await apiService.put<ProducaoDetalhadaDto>(\n        API_ENDPOINTS.PRODUCTIONS.ATUALIZAR(contratoId), \n        producaoData\n      );\n      \n      return this.mapProducaoToProduction(response);\n    } catch (error) {\n      console.error('Update production error:', error);\n      throw error;\n    }\n  }\n\n  // Finalizar produção\n  async finishProduction(contratoId: string, producaoData: any): Promise<Production> {\n    try {\n      const response = await apiService.put<ProducaoDetalhadaDto>(\n        API_ENDPOINTS.PRODUCTIONS.FINALIZAR(contratoId), \n        producaoData\n      );\n      \n      return this.mapProducaoToProduction(response);\n    } catch (error) {\n      console.error('Finish production error:', error);\n      throw error;\n    }\n  }\n\n  // Apontar produção\n  async apontarProducao(contratoId: string, apontamentoData: any): Promise<any> {\n    try {\n      const response = await apiService.post(\n        API_ENDPOINTS.PRODUCTIONS.APONTAR(contratoId), \n        apontamentoData\n      );\n      \n      return response;\n    } catch (error) {\n      console.error('Apontar produção error:', error);\n      throw error;\n    }\n  }\n\n  // Buscar estatísticas de produção via Dashboard\n  async getProductionStats(contratoId: string, filters?: {\n    lineId?: string;\n    startDate?: string;\n    endDate?: string;\n    usuarioId?: string;\n  }): Promise<ProductionStats> {\n    try {\n      console.log('Chamando API Dashboard com contratoId:', contratoId);\n      \n      // Verificar se usuarioId foi fornecido\n      if (!filters?.usuarioId) {\n        throw new Error('usuarioId é obrigatório para a API Dashboard');\n      }\n      \n      // Debug: verificar se token está disponível\n      const token = await tokenStorage.getToken();\n      console.log('Token disponível:', token ? 'SIM' : 'NÃO');\n      \n      // Usar sempre o usuarioId real da sessão autenticada\n      const realUsuarioId = filters.usuarioId;\n      \n      // Verificar se usuarioId é um GUID válido - não usar fallback\n      if (!realUsuarioId || realUsuarioId === '1' || !realUsuarioId.includes('-')) {\n        throw new Error('usuarioId inválido. Por favor, faça login novamente para obter credenciais válidas.');\n      }\n      \n      const validUsuarioId = realUsuarioId;\n      \n      // Preparar CircuitoIds - API requer array não-vazio\n      let circuitoIds: string[] = [];\n      \n      if (filters?.lineId) {\n        // Se linha específica foi selecionada\n        circuitoIds = [filters.lineId];\n      } else {\n        // Se nenhuma linha específica, precisamos buscar todas as linhas do contrato\n        try {\n          const circuits = await apiService.get<any[]>(\n            API_ENDPOINTS.CIRCUITOS(contratoId)\n          );\n          circuitoIds = circuits.map(c => c.id || c.circuitoId || c.Id || c.CircuitoId).filter(Boolean);\n          console.log('Circuitos carregados para Dashboard:', circuitoIds);\n        } catch (circuitError) {\n          console.warn('Não foi possível carregar circuitos, usando array vazio:', circuitError);\n          // Se não conseguir carregar circuitos, pular a chamada do Dashboard\n          throw new Error('Não foi possível carregar as linhas de produção para o Dashboard.');\n        }\n      }\n      \n      // Mapear filtros para o DTO esperado pela API - DashboardSearchDto com campos lowercase\n      const requestBody = {\n        usuarioId: validUsuarioId,\n        de: filters?.startDate ? `${filters.startDate}T00:00:00` : undefined,\n        ate: filters?.endDate ? `${filters.endDate}T23:59:59` : undefined,\n        circuitoIds: circuitoIds, // Array não-vazio conforme requerido pela API\n      };\n\n      // A API PCount Dashboard usa V1 conforme documentação Swagger\n      const endpoint = API_ENDPOINTS_V1.V1.DASHBOARD(contratoId);\n      console.log('Endpoint da API Dashboard V1:', endpoint);\n      console.log('Dashboard Request Body:', requestBody);\n      \n      // O apiService já adiciona o header EquipamentoId automaticamente\n      \n      const response = await apiService.post<DashboardResponseDto>(\n        endpoint,\n        requestBody\n      );\n      \n      // Log detalhado da resposta da API para debugging\n      console.log('Dashboard API resposta completa:', response);\n      console.log('Campos específicos da resposta:', {\n        horaProdutiva: response.horaProdutiva,\n        horaOciosa: response.horaOciosa,\n        mediaHora: response.mediaHora,\n        totalProduzido: response.totalProduzido,\n        totalProduzidoHora: response.totalProduzidoHora\n      });\n      \n      // Funções auxiliares para parsing robusto de duração\n      const parseDurationToMinutes = (value: any): number => {\n        if (!value) return 0;\n        \n        // Se for número, considera como horas\n        if (typeof value === 'number') return value * 60;\n        \n        const str = String(value).trim();\n        if (!str) return 0;\n        \n        // Formato HH:mm ou H:mm\n        if (str.includes(':')) {\n          const [hours, minutes] = str.split(':').map(part => parseInt(part) || 0);\n          return hours * 60 + minutes;\n        }\n        \n        // String decimal (ex: \"2.5\")\n        const decimal = parseFloat(str);\n        return isNaN(decimal) ? 0 : decimal * 60;\n      };\n      \n      const formatMinutesToHours = (minutes: number): string => {\n        if (minutes === 0) return '--';\n        const hours = Math.floor(minutes / 60);\n        const mins = minutes % 60;\n        return mins > 0 ? `${hours}:${mins.toString().padStart(2, '0')}` : `${hours}.0`;\n      };\n      \n      // Analisar dados de produção por hora para calcular métricas reais\n      const hourlyData = response.totalProduzidoHora || [];\n      \n      // Calcular horas produtivas baseado nos dados reais de produção\n      const horasComProducao = hourlyData.filter(item => (item.valor1 || 0) > 0);\n      const horasOperacao = hourlyData.filter(item => \n        (item.valor1 || 0) > 0 || (item.valor2 || 0) > 0\n      );\n      \n      // Parsing robusto dos dados da API (preferir dados calculados)\n      let horaProdutivaMins = parseDurationToMinutes(response.horaProdutiva);\n      let horaOciosaMins = parseDurationToMinutes(response.horaOciosa);\n      \n      // Se a API não fornece horaProdutiva, calcular baseado nos dados disponíveis\n      if (!response.horaProdutiva || response.horaProdutiva === null) {\n        horaProdutivaMins = horasComProducao.length * 60; // cada hora = 60 minutos\n        console.log(`Calculando horas produtivas: ${horasComProducao.length} horas com produção`);\n      }\n      \n      // Se a API não fornece horaOciosa, calcular baseado na diferença\n      if (!response.horaOciosa || response.horaOciosa === null) {\n        const horasOciosasCalculadas = Math.max(0, horasOperacao.length - horasComProducao.length);\n        horaOciosaMins = horasOciosasCalculadas * 60;\n        console.log(`Calculando horas ociosas: ${horasOciosasCalculadas} horas sem produção`);\n      }\n      \n      const totalHorasOperacaoMins = horaProdutivaMins + horaOciosaMins;\n      \n      // Calcular horas produtivas para exibição\n      let productiveHoursDisplay: string;\n      if (response.horaProdutiva && response.horaProdutiva !== '0' && response.horaProdutiva !== '0.0' && response.horaProdutiva !== null) {\n        productiveHoursDisplay = String(response.horaProdutiva);\n      } else if (horaProdutivaMins > 0) {\n        // Exibir em formato decimal se calculado baseado nos dados reais\n        const horasDecimal = (horaProdutivaMins / 60).toFixed(1);\n        productiveHoursDisplay = horasDecimal;\n      } else {\n        productiveHoursDisplay = '--';\n      }\n      \n      // Calcular produção média com fallbacks\n      let avgProduction = 0;\n      const totalProduced = response.totalProduzido?.total || 0;\n      \n      if (response.mediaHora && response.mediaHora > 0) {\n        avgProduction = response.mediaHora;\n      } else if (totalProduced > 0 && horaProdutivaMins > 0) {\n        // Fallback: calcular média com base no total produzido e horas produtivas\n        const hoursProductive = horaProdutivaMins / 60;\n        avgProduction = Math.round(totalProduced / hoursProductive);\n      } else if (response.totalProduzidoHora && response.totalProduzidoHora.length > 0) {\n        // Fallback: calcular média dos dados por hora\n        const hourlyValues = response.totalProduzidoHora\n          .map((item: any) => item.valor1 || 0)\n          .filter((value: number) => value > 0);\n        if (hourlyValues.length > 0) {\n          avgProduction = Math.round(hourlyValues.reduce((sum: number, val: number) => sum + val, 0) / hourlyValues.length);\n        }\n      }\n      \n      const finalStats = {\n        operationHours: (totalHorasOperacaoMins / 60).toFixed(1),\n        productiveHours: productiveHoursDisplay,\n        avgProduction: avgProduction,\n        totalProduced: totalProduced,\n        hourlyProduction: response.totalProduzidoHora?.map((item: any) => ({\n          hour: `${item.dataHora}:00`,\n          value: item.valor1 || 0\n        })) || [],\n      };\n      \n      // Log dos valores calculados para debugging\n      console.log('Estatísticas calculadas:', {\n        horaProdutivaMins,\n        horaOciosaMins,\n        totalHorasOperacaoMins,\n        productiveHoursDisplay,\n        avgProduction,\n        totalProduced,\n        horasComProducaoCount: horasComProducao.length,\n        horasOperacaoCount: horasOperacao.length,\n        dadosCalculadosDoAPI: {\n          horaProdutiva: response.horaProdutiva,\n          horaOciosa: response.horaOciosa,\n          mediaHora: response.mediaHora\n        }\n      });\n      \n      return finalStats;\n    } catch (error: any) {\n      console.error('Get production stats error:', error);\n      console.error('Erro detalhado da API Dashboard:', {\n        message: error?.message,\n        status: error?.status,\n        response: error?.response,\n        url: API_ENDPOINTS.DASHBOARD(contratoId)\n      });\n      \n      // Não usar fallback - sempre rejeitar erro da API para forçar correção\n      console.error('Dashboard API falhou - verificar configuração de endpoints e autenticação:', error?.message);\n      \n      throw error;\n    }\n  }\n}\n\nexport const productionService = new ProductionService();","size_bytes":15005},"pcount/src/services/tokenStorage.ts":{"content":"import * as SecureStore from 'expo-secure-store';\nimport { Platform } from 'react-native';\n\nconst TOKEN_KEY = 'auth_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst CONTRACT_ID_KEY = 'selected_contract_id';\nconst CONTRACT_DATA_KEY = 'selected_contract_data';\nconst USER_INFO_KEY = 'user_info';\nconst DEVICE_UUID_KEY = 'device_uuid';\n\nexport class TokenStorage {\n  private isSecureStoreAvailable: boolean | null = null;\n  private hasLoggedFallback = false;\n\n  private async checkSecureStoreAvailability(): Promise<boolean> {\n    if (this.isSecureStoreAvailable !== null) {\n      return this.isSecureStoreAvailable;\n    }\n\n    try {\n      // Check if SecureStore is available\n      this.isSecureStoreAvailable = await SecureStore.isAvailableAsync();\n      \n      // Log fallback warning once\n      if (!this.isSecureStoreAvailable && !this.hasLoggedFallback && Platform.OS === 'web') {\n        console.warn('SecureStore não disponível na web, usando localStorage como fallback');\n        this.hasLoggedFallback = true;\n      }\n      \n      return this.isSecureStoreAvailable;\n    } catch (error) {\n      this.isSecureStoreAvailable = false;\n      \n      if (!this.hasLoggedFallback && Platform.OS === 'web') {\n        console.warn('SecureStore não disponível na web, usando localStorage como fallback');\n        this.hasLoggedFallback = true;\n      }\n      \n      return false;\n    }\n  }\n\n  private async getFromStorage(key: string): Promise<string | null> {\n    const isSecureAvailable = await this.checkSecureStoreAvailability();\n    \n    if (isSecureAvailable) {\n      return await SecureStore.getItemAsync(key);\n    }\n    \n    // Fallback to localStorage on web\n    if (typeof window !== 'undefined' && window.localStorage) {\n      return window.localStorage.getItem(key);\n    }\n    \n    return null;\n  }\n\n  private async setToStorage(key: string, value: string): Promise<void> {\n    const isSecureAvailable = await this.checkSecureStoreAvailability();\n    \n    if (isSecureAvailable) {\n      await SecureStore.setItemAsync(key, value);\n      return;\n    }\n    \n    // Fallback to localStorage on web\n    if (typeof window !== 'undefined' && window.localStorage) {\n      window.localStorage.setItem(key, value);\n    }\n  }\n\n  private async removeFromStorage(key: string): Promise<void> {\n    const isSecureAvailable = await this.checkSecureStoreAvailability();\n    \n    if (isSecureAvailable) {\n      await SecureStore.deleteItemAsync(key);\n      return;\n    }\n    \n    // Fallback to localStorage on web\n    if (typeof window !== 'undefined' && window.localStorage) {\n      window.localStorage.removeItem(key);\n    }\n  }\n\n  // Armazenar token de forma segura\n  async setToken(token: string): Promise<void> {\n    try {\n      await this.setToStorage(TOKEN_KEY, token);\n    } catch (error) {\n      console.error('Erro ao armazenar token:', error);\n    }\n  }\n\n  // Recuperar token armazenado\n  async getToken(): Promise<string | null> {\n    try {\n      return await this.getFromStorage(TOKEN_KEY);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Armazenar refresh token\n  async setRefreshToken(refreshToken: string): Promise<void> {\n    try {\n      await this.setToStorage(REFRESH_TOKEN_KEY, refreshToken);\n    } catch (error) {\n      console.error('Erro ao armazenar refresh token:', error);\n    }\n  }\n\n  // Recuperar refresh token\n  async getRefreshToken(): Promise<string | null> {\n    try {\n      return await this.getFromStorage(REFRESH_TOKEN_KEY);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Remover todos os tokens\n  async clearTokens(): Promise<void> {\n    try {\n      await this.removeFromStorage(TOKEN_KEY);\n      await this.removeFromStorage(REFRESH_TOKEN_KEY);\n    } catch (error) {\n      console.error('Erro ao limpar tokens:', error);\n    }\n  }\n\n  // Verificar se há token armazenado\n  async hasToken(): Promise<boolean> {\n    const token = await this.getToken();\n    return token !== null;\n  }\n\n  // Armazenar ID do contrato selecionado\n  async setContractId(contractId: string): Promise<void> {\n    try {\n      await this.setToStorage(CONTRACT_ID_KEY, contractId);\n    } catch (error) {\n      console.error('Erro ao armazenar contract ID:', error);\n    }\n  }\n\n  // Recuperar ID do contrato armazenado\n  async getContractId(): Promise<string | null> {\n    try {\n      return await this.getFromStorage(CONTRACT_ID_KEY);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Armazenar dados completos do contrato selecionado\n  async setContractData(contractData: any): Promise<void> {\n    try {\n      await this.setToStorage(CONTRACT_DATA_KEY, JSON.stringify(contractData));\n    } catch (error) {\n      console.error('Erro ao armazenar dados do contrato:', error);\n    }\n  }\n\n  // Recuperar dados completos do contrato\n  async getContractData(): Promise<any | null> {\n    try {\n      const data = await this.getFromStorage(CONTRACT_DATA_KEY);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Remover dados do contrato\n  async clearContractData(): Promise<void> {\n    try {\n      await this.removeFromStorage(CONTRACT_ID_KEY);\n      await this.removeFromStorage(CONTRACT_DATA_KEY);\n    } catch (error) {\n      console.error('Erro ao limpar dados do contrato:', error);\n    }\n  }\n\n  // Armazenar informações do usuário\n  async setUserInfo(userInfo: any): Promise<void> {\n    try {\n      await this.setToStorage(USER_INFO_KEY, JSON.stringify(userInfo));\n    } catch (error) {\n      console.error('Erro ao armazenar informações do usuário:', error);\n    }\n  }\n\n  // Recuperar informações do usuário\n  async getUserInfo(): Promise<any | null> {\n    try {\n      const data = await this.getFromStorage(USER_INFO_KEY);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Gerar e recuperar UUID único do dispositivo\n  async getDeviceUUID(): Promise<string> {\n    try {\n      let uuid = await this.getFromStorage(DEVICE_UUID_KEY);\n      if (!uuid) {\n        // Gerar UUID simples para dispositivo\n        uuid = 'device-' + Math.random().toString(36).substr(2, 9) + '-' + Date.now().toString(36);\n        await this.setToStorage(DEVICE_UUID_KEY, uuid);\n      }\n      return uuid;\n    } catch (error) {\n      // Fallback UUID se houver erro\n      return 'device-fallback-' + Date.now();\n    }\n  }\n\n  // Limpar informações do usuário\n  async clearUserInfo(): Promise<void> {\n    try {\n      await this.removeFromStorage(USER_INFO_KEY);\n    } catch (error) {\n      console.error('Erro ao limpar informações do usuário:', error);\n    }\n  }\n\n  // Limpar todos os dados (tokens + contrato + usuário)\n  async clearAllData(): Promise<void> {\n    try {\n      await this.clearTokens();\n      await this.clearContractData();\n      await this.clearUserInfo();\n      // Não limpar device UUID - deve persistir\n    } catch (error) {\n      console.error('Erro ao limpar todos os dados:', error);\n    }\n  }\n}\n\nexport const tokenStorage = new TokenStorage();","size_bytes":7001},"pcount/src/theme/index.ts":{"content":"export interface Theme {\n  colors: {\n    primary: string;\n    primaryLight: string;\n    primaryDark: string;\n    accent: string;\n    accentLight: string;\n    secondary: string;\n    background: string;\n    backgroundGradient: string;\n    surface: string;\n    surfaceSecondary: string;\n    surfaceElevated: string;\n    text: string;\n    textSecondary: string;\n    textInverse: string;\n    border: string;\n    borderLight: string;\n    success: string;\n    successLight: string;\n    warning: string;\n    warningLight: string;\n    error: string;\n    errorLight: string;\n    info: string;\n    infoLight: string;\n    white: string;\n    black: string;\n    shadow: string;\n    overlay: string;\n  };\n  gradients: {\n    primary: string;\n    accent: string;\n    background: string;\n    surface: string;\n  };\n  fonts: {\n    regular: string;\n    medium: string;\n    semiBold: string;\n    bold: string;\n    black: string;\n  };\n  fontSizes: {\n    xs: number;\n    sm: number;\n    base: number;\n    lg: number;\n    xl: number;\n    '2xl': number;\n    '3xl': number;\n    '4xl': number;\n  };\n  spacing: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    '2xl': number;\n    '3xl': number;\n    '4xl': number;\n  };\n  borderRadius: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    '2xl': number;\n    '3xl': number;\n    full: number;\n  };\n  shadows: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n    inner: string;\n  };\n}\n\nexport const theme: Theme = {\n  colors: {\n    primary: '#6366f1',\n    primaryLight: '#a5b4fc',\n    primaryDark: '#4338ca',\n    accent: '#06b6d4',\n    accentLight: '#67e8f9',\n    secondary: '#8b5cf6',\n    background: '#fefefe',\n    backgroundGradient: 'linear-gradient(135deg, #3b82f6 0%, #1e40af 100%)',\n    surface: '#ffffff',\n    surfaceSecondary: '#f8fafc',\n    surfaceElevated: '#ffffff',\n    text: '#0f172a',\n    textSecondary: '#64748b',\n    textInverse: '#ffffff',\n    border: '#e2e8f0',\n    borderLight: '#f1f5f9',\n    success: '#10b981',\n    successLight: '#d1fae5',\n    warning: '#f59e0b',\n    warningLight: '#fef3c7',\n    error: '#ef4444',\n    errorLight: '#fecaca',\n    info: '#3b82f6',\n    infoLight: '#dbeafe',\n    white: '#ffffff',\n    black: '#000000',\n    shadow: '#1e293b',\n    overlay: 'rgba(15, 23, 42, 0.5)',\n  },\n  gradients: {\n    primary: 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #06b6d4 100%)',\n    accent: 'linear-gradient(135deg, #06b6d4 0%, #10b981 100%)',\n    background: 'linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%)',\n    surface: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',\n  },\n  fonts: {\n    regular: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    medium: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    semiBold: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    bold: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    black: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n  },\n  fontSizes: {\n    xs: 12,\n    sm: 14,\n    base: 16,\n    lg: 18,\n    xl: 20,\n    '2xl': 24,\n    '3xl': 30,\n    '4xl': 36,\n  },\n  spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n    '2xl': 48,\n    '3xl': 64,\n    '4xl': 96,\n  },\n  borderRadius: {\n    xs: 2,\n    sm: 4,\n    md: 8,\n    lg: 12,\n    xl: 16,\n    '2xl': 24,\n    '3xl': 32,\n    full: 9999,\n  },\n  shadows: {\n    xs: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    sm: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n    inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n  },\n};","size_bytes":3908},"pcount/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  password: string;\n  name: string;\n  role: 'admin' | 'operator';\n}\n\nexport interface Contract {\n  id: string;\n  name: string;\n  company: string;\n}\n\nexport interface ProductionLine {\n  id: string;\n  name: string;\n  status: 'produzindo' | 'aguardando' | 'iniciando';\n  code: string;\n  // Informações adicionais da máquina\n  operator?: string;\n  location?: string;\n  capacity?: number;\n  currentProduction?: number;\n  machineType?: string;\n  lastMaintenance?: string;\n  temperature?: number;\n  efficiency?: number;\n}\n\nexport interface Production {\n  id: string;\n  lineId: string;\n  productCode: string;\n  productName: string;\n  technician: string;\n  startDate: string;\n  endDate?: string;\n  status: 'EM PRODUCAO' | 'FINALIZADA';\n}\n\nexport interface ProductionStats {\n  operationHours: string;\n  productiveHours: string;\n  avgProduction: number;\n  totalProduced: number;\n  hourlyProduction: Array<{ hour: string; value: number }>;\n}\n\n// DTOs para API PCount Dashboard\nexport interface DashboardSearchDto {\n  usuarioId: string;\n  de?: string;\n  ate?: string;\n  circuitoIds?: string[];\n}\n\nexport interface DashboardResponseDto {\n  horaProdutiva?: string | null;\n  horaOciosa?: string | null;\n  mediaHora?: number;\n  totalProduzido?: {\n    maximo: number;\n    minimo: number;\n    total: number;\n  };\n  totalProduzidoHora?: Array<{\n    dataHora: string;\n    valor1: number;\n    valor2: number;\n  }>;\n}\n\nexport interface AuthContextType {\n  isAuthenticated: boolean;\n  currentUser: User | null;\n  selectedContract: Contract | null;\n  contracts: Contract[];\n  loading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<boolean>;\n  selectContract: (contract: Contract) => void;\n  logout: () => void;\n  loadContracts: () => Promise<void>;\n  clearError: () => void;\n}","size_bytes":1850}},"version":1}