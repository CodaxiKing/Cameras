{"file_contents":{"App.tsx":{"content":"import React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { AuthProvider } from './src/contexts/AuthContext';\nimport { AppNavigator } from './src/navigation/AppNavigator';\n\nexport default function App() {\n  return (\n    <AuthProvider>\n      <AppNavigator />\n      <StatusBar style=\"auto\" />\n    </AuthProvider>\n  );\n}\n","size_bytes":339},"README.md":{"content":"# Pcount","size_bytes":8},"index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"replit.md":{"content":"# PCOUNT - Production Monitoring Application\n\n## Overview\nPCOUNT is a React Native web application built with Expo for production line monitoring and counting. The application provides a dashboard for tracking production statistics, managing production lines, and monitoring production data.\n\n## Project Architecture\n- **Framework**: Expo React Native (configured for web)\n- **Language**: TypeScript\n- **Navigation**: React Navigation with bottom tabs and stack navigation\n- **Styling**: Styled Components with React Native\n- **State Management**: React Context API for authentication\n- **Development Server**: Expo Metro bundler on port 5000\n\n## Recent Changes (September 15, 2025)\n1. Fixed TypeScript configuration to support JSX compilation\n2. Configured development workflow for Expo web on port 5000\n3. Set up deployment configuration for production (autoscale)\n4. Added serve package for production static file serving\n5. Verified application runs correctly in Replit environment\n\n## Application Features\n- **Authentication**: Login system with Admin/Admin default credentials\n- **Dashboard**: Production statistics and metrics display\n- **Production Lines**: Management and monitoring of production lines\n- **Contract Management**: Multi-contract support with selection flow\n- **Responsive Design**: Optimized for web deployment\n\n## Development Setup\n- Development server runs on port 5000 using `npx expo start --web --port 5000`\n- TypeScript configuration supports JSX with react-jsx transform\n- Metro bundler handles module resolution and bundling\n- Application uses React Native Web for web compatibility\n\n## Deployment Configuration\n- **Target**: Autoscale (stateless web application)\n- **Build**: `npx expo export --platform web` (creates optimized build)\n- **Run**: `npx serve -s dist -p 5000` (serves static files)\n- **Dependencies**: serve package installed for production deployment\n\n## User Preferences\n- Default login credentials: Admin/Admin\n- Portuguese language interface\n- Production-focused UI design\n- Tab-based navigation for main features\n\n## File Structure\n- `/src/screens/`: Application screens (Login, Dashboard, Production, etc.)\n- `/src/components/`: Reusable styled components\n- `/src/contexts/`: React Context providers (Auth)\n- `/src/data/`: Mock data for users, contracts, production lines\n- `/src/navigation/`: React Navigation configuration\n- `/src/types/`: TypeScript type definitions\n- `/assets/`: Application icons and images","size_bytes":2466},"src/components/StyledComponents.tsx":{"content":"import styled from 'styled-components/native';\nimport { theme } from '../theme';\n\nexport const Container = styled.SafeAreaView`\n  flex: 1;\n  background-color: ${theme.colors.background};\n`;\n\nexport const CenteredContainer = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  padding: ${theme.spacing.xl}px;\n`;\n\nexport const Logo = styled.Text`\n  font-size: ${theme.fontSizes.xxlarge}px;\n  font-weight: bold;\n  color: ${theme.colors.primary};\n  margin-bottom: ${theme.spacing.xl}px;\n`;\n\nexport const Input = styled.TextInput`\n  width: 100%;\n  height: 50px;\n  border-color: ${theme.colors.border};\n  border-width: 1px;\n  border-radius: ${theme.borderRadius.md}px;\n  padding: 0 ${theme.spacing.md}px;\n  margin-bottom: ${theme.spacing.md}px;\n  background-color: ${theme.colors.white};\n  color: ${theme.colors.text};\n`;\n\nexport const Button = styled.TouchableOpacity<{ variant?: 'primary' | 'secondary' }>`\n  width: 100%;\n  height: 50px;\n  background-color: ${(props: { variant?: 'primary' | 'secondary' }) => \n    props.variant === 'secondary' ? theme.colors.surface : theme.colors.primary};\n  justify-content: center;\n  align-items: center;\n  border-radius: ${theme.borderRadius.md}px;\n  margin-top: ${theme.spacing.md}px;\n`;\n\nexport const ButtonText = styled.Text<{ variant?: 'primary' | 'secondary' }>`\n  color: ${(props: { variant?: 'primary' | 'secondary' }) => \n    props.variant === 'secondary' ? theme.colors.text : theme.colors.white};\n  font-size: ${theme.fontSizes.large}px;\n  font-weight: bold;\n`;\n\nexport const Title = styled.Text`\n  font-size: ${theme.fontSizes.xlarge}px;\n  font-weight: bold;\n  color: ${theme.colors.text};\n  text-align: center;\n  margin: ${theme.spacing.xl}px 0;\n`;\n\nexport const Card = styled.TouchableOpacity<{ backgroundColor?: string }>`\n  background-color: ${(props: { backgroundColor?: string }) => props.backgroundColor || theme.colors.white};\n  border-radius: ${theme.borderRadius.lg}px;\n  padding: ${theme.spacing.md}px;\n  margin: ${theme.spacing.sm}px 0;\n  shadow-color: ${theme.colors.shadow};\n  shadow-offset: 0px 2px;\n  shadow-opacity: 0.1;\n  shadow-radius: 8px;\n  elevation: 2;\n`;\n\nexport const StatusIndicator = styled.View<{ status: 'produzindo' | 'aguardando' | 'iniciando' }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 6px;\n  background-color: ${(props: { status: 'produzindo' | 'aguardando' | 'iniciando' }) => {\n    switch (props.status) {\n      case 'produzindo': return theme.colors.success;\n      case 'aguardando': return theme.colors.warning;\n      case 'iniciando': return theme.colors.info;\n      default: return theme.colors.textSecondary;\n    }\n  }};\n`;","size_bytes":2642},"src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { users } from '../data/users';\nimport { contracts } from '../data/contracts';\nimport { AuthContextType, User, Contract } from '../types';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [selectedContract, setSelectedContract] = useState<Contract | null>(null);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    // Simula validação com usuário padrão Admin/Admin\n    const user = users.find(u => u.email === email && u.password === password);\n    \n    if (user) {\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      return true;\n    }\n    return false;\n  };\n\n  const selectContract = (contract: Contract) => {\n    setSelectedContract(contract);\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    setSelectedContract(null);\n    setIsAuthenticated(false);\n  };\n\n  const value: AuthContextType = {\n    isAuthenticated,\n    currentUser,\n    selectedContract,\n    login,\n    selectContract,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":1646},"src/data/contracts.ts":{"content":"import { Contract } from '../types';\n\nexport const contracts: Contract[] = [\n  {\n    id: '1',\n    name: 'Guaravita',\n    company: 'Viton',\n  },\n  {\n    id: '2',\n    name: 'Produtos ABC',\n    company: 'ABC Corp',\n  },\n];","size_bytes":219},"src/data/productionLines.ts":{"content":"import { ProductionLine } from '../types';\n\nexport const productionLines: ProductionLine[] = [\n  {\n    id: '1',\n    name: 'P1-MQA5',\n    status: 'produzindo',\n    code: '4GWL190175221',\n  },\n  {\n    id: '2',\n    name: 'P1-MQA4',\n    status: 'aguardando',\n    code: '4GWL280084334',\n  },\n  {\n    id: '3',\n    name: 'P1-MQA3',\n    status: 'produzindo',\n    code: '4GWL28009239Q',\n  },\n  {\n    id: '4',\n    name: 'P1-MQA2',\n    status: 'iniciando',\n    code: '4GWL280074571',\n  },\n  {\n    id: '5',\n    name: 'P1-MQA1',\n    status: 'produzindo',\n    code: '4GWK320052YR',\n  },\n];","size_bytes":575},"src/data/productions.ts":{"content":"import { Production, ProductionStats } from '../types';\n\nexport const productions: Production[] = [\n  {\n    id: '1',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Lwruck@guaravita.com.br',\n    startDate: '28/08/2025 - 05:48',\n    status: 'EM PRODUCAO',\n  },\n  {\n    id: '2',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Lwruck@guaravita.com.br',\n    startDate: '27/08/2025 - 05:58',\n    endDate: '28/08/2025 - 05:20',\n    status: 'FINALIZADA',\n  },\n  {\n    id: '3',\n    lineId: '1',\n    productCode: 'P100.0001.CX24',\n    productName: 'GUARAVITA NATURAL 290ML',\n    technician: 'Fcorreia@guaravita.com.br',\n    startDate: '25/09/2025 - 19:51',\n    endDate: '26/09/2025 - 08:15',\n    status: 'FINALIZADA',\n  },\n];\n\nexport const productionStats: ProductionStats = {\n  operationHours: '17:25',\n  productiveHours: '14:00',\n  avgProduction: 6.5,\n  totalProduced: 4082.0,\n  hourlyProduction: [\n    { hour: '00:00', value: 118 },\n    { hour: '01:00', value: 0 },\n    { hour: '02:00', value: 0 },\n    { hour: '03:00', value: 0 },\n    { hour: '04:00', value: 0 },\n  ],\n};","size_bytes":1197},"src/data/users.ts":{"content":"import { User } from '../types';\n\n// Usuário padrão Admin/Admin conforme solicitado\nexport const users: User[] = [\n  {\n    id: '1', \n    email: 'Admin',\n    password: 'Admin',\n    name: 'Administrador',\n    role: 'admin',\n  },\n  {\n    id: '2',\n    email: 'operador@example.com',\n    password: 'op123',\n    name: 'Operador',\n    role: 'operator',\n  },\n];","size_bytes":355},"src/navigation/AppNavigator.tsx":{"content":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useAuth } from '../contexts/AuthContext';\nimport { LoginScreen } from '../screens/LoginScreen';\nimport { ContractScreen } from '../screens/ContractScreen';\nimport { DashboardScreen } from '../screens/DashboardScreen';\nimport { LinesScreen } from '../screens/LinesScreen';\nimport { ProductionScreen } from '../screens/ProductionScreen';\nimport { LineDetailScreen } from '../screens/LineDetailScreen';\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nconst MainTabs = () => {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: '#007AFF',\n        tabBarInactiveTintColor: '#8E8E93',\n      }}\n    >\n      <Tab.Screen \n        name=\"Dashboard\" \n        component={DashboardScreen}\n        options={{\n          tabBarLabel: 'Dashboard',\n        }}\n      />\n      <Tab.Screen \n        name=\"Lines\" \n        component={LinesScreen}\n        options={{\n          tabBarLabel: 'Linhas',\n        }}\n      />\n      <Tab.Screen \n        name=\"Production\" \n        component={ProductionScreen}\n        options={{\n          tabBarLabel: 'Produção',\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport const AppNavigator = () => {\n  const { isAuthenticated, selectedContract } = useAuth();\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        {!isAuthenticated ? (\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n        ) : !selectedContract ? (\n          <Stack.Screen name=\"ContractScreen\" component={ContractScreen} />\n        ) : (\n          <>\n            <Stack.Screen name=\"MainTabs\" component={MainTabs} />\n            <Stack.Screen name=\"LineDetail\" component={LineDetailScreen} />\n          </>\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};","size_bytes":2059},"src/screens/ContractScreen.tsx":{"content":"import React from 'react';\nimport { FlatList } from 'react-native';\nimport { useAuth } from '../contexts/AuthContext';\nimport { contracts } from '../data/contracts';\nimport {\n  Container,\n  Title,\n  Card,\n  ButtonText,\n} from '../components/StyledComponents';\n\ninterface ContractScreenProps {\n  navigation: any;\n}\n\nexport const ContractScreen: React.FC<ContractScreenProps> = ({ navigation }) => {\n  const { selectContract } = useAuth();\n\n  const handleContractSelect = (contract: any) => {\n    selectContract(contract);\n    // Removido navigation.navigate - deixa o AppNavigator controlar automaticamente\n  };\n\n  return (\n    <Container style={{ padding: 16 }}>\n      <Title>Selecione o Contrato</Title>\n      \n      <FlatList\n        data={contracts}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Card onPress={() => handleContractSelect(item)}>\n            <ButtonText variant=\"secondary\">{item.name}</ButtonText>\n          </Card>\n        )}\n      />\n    </Container>\n  );\n};","size_bytes":1021},"src/screens/DashboardScreen.tsx":{"content":"import React from 'react';\nimport { View, Text, ScrollView } from 'react-native';\nimport { productionStats } from '../data/productions';\nimport {\n  Container,\n  Title,\n  Card,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\nexport const DashboardScreen: React.FC = () => {\n  return (\n    <Container>\n      <ScrollView style={{ padding: 16 }}>\n        <Title>Dashboard</Title>\n        \n        <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 16 }}>\n          <Card style={{ flex: 1, marginRight: 8 }}>\n            <Text style={{ fontSize: 12, color: theme.colors.textSecondary }}>Horas</Text>\n            <Text style={{ fontSize: 16, fontWeight: 'bold', color: theme.colors.warning }}>\n              {productionStats.operationHours}\n            </Text>\n            <Text style={{ fontSize: 10 }}>Operação</Text>\n          </Card>\n          \n          <Card style={{ flex: 1, marginRight: 8 }}>\n            <Text style={{ fontSize: 12, color: theme.colors.textSecondary }}>Horas</Text>\n            <Text style={{ fontSize: 16, fontWeight: 'bold', color: theme.colors.error }}>\n              {productionStats.productiveHours}\n            </Text>\n            <Text style={{ fontSize: 10 }}>Produtivas</Text>\n          </Card>\n          \n          <Card style={{ flex: 1 }}>\n            <Text style={{ fontSize: 12, color: theme.colors.textSecondary }}>Produção</Text>\n            <Text style={{ fontSize: 16, fontWeight: 'bold', color: theme.colors.info }}>\n              {productionStats.avgProduction}\n            </Text>\n            <Text style={{ fontSize: 10 }}>Média / Hr</Text>\n          </Card>\n        </View>\n        \n        <Card>\n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 16 }}>TOTAL PRODUZIDO</Text>\n          <Text style={{ fontSize: 48, fontWeight: 'bold', textAlign: 'center' }}>\n            {productionStats.totalProduced}\n          </Text>\n        </Card>\n        \n        <Card style={{ marginTop: 16 }}>\n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 16 }}>TOTAL PRODUZIDO / HORA</Text>\n          <Text style={{ fontSize: 16 }}>Gráfico de produção por hora</Text>\n        </Card>\n      </ScrollView>\n    </Container>\n  );\n};","size_bytes":2270},"src/screens/LineDetailScreen.tsx":{"content":"import React from 'react';\nimport { ScrollView, View, Text, TouchableOpacity } from 'react-native';\nimport { productions } from '../data/productions';\nimport {\n  Container,\n  Card,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\ninterface LineDetailScreenProps {\n  route: any;\n  navigation: any;\n}\n\nexport const LineDetailScreen: React.FC<LineDetailScreenProps> = ({ route, navigation }) => {\n  const { line } = route.params;\n  \n  // Filtrar produções da linha específica\n  const lineProductions = productions.filter(prod => prod.lineId === line.id);\n  const activeProductions = lineProductions.filter(prod => prod.status === 'EM PRODUCAO');\n  const finishedProductions = lineProductions.filter(prod => prod.status === 'FINALIZADA');\n\n  const ProductionItem = ({ production }: { production: any }) => (\n    <Card style={{ marginBottom: 8 }}>\n      <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <View style={{ flex: 1 }}>\n          <View style={{ \n            backgroundColor: production.status === 'EM PRODUCAO' ? theme.colors.success : theme.colors.textSecondary,\n            paddingHorizontal: 8,\n            paddingVertical: 4,\n            borderRadius: 4,\n            alignSelf: 'flex-start',\n            marginBottom: 8\n          }}>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 12,\n              fontWeight: 'bold'\n            }}>\n              {line.name}\n            </Text>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 10\n            }}>\n              {production.status}\n            </Text>\n          </View>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Código: <Text style={{ fontWeight: 'normal' }}>{production.productCode}</Text>\n          </Text>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Produto: <Text style={{ fontWeight: 'normal' }}>{production.productName}</Text>\n          </Text>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Técnico: <Text style={{ fontWeight: 'normal' }}>{production.technician}</Text>\n          </Text>\n          \n          <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 4 }}>\n            Data início: <Text style={{ fontWeight: 'normal' }}>{production.startDate}</Text>\n          </Text>\n          \n          {production.endDate && (\n            <Text style={{ fontSize: 14, fontWeight: 'bold' }}>\n              Data final: <Text style={{ fontWeight: 'normal' }}>{production.endDate}</Text>\n            </Text>\n          )}\n        </View>\n        \n        <TouchableOpacity>\n          <Text style={{ fontSize: 18, color: theme.colors.primary }}>→</Text>\n        </TouchableOpacity>\n      </View>\n    </Card>\n  );\n\n  return (\n    <Container>\n      {/* Header */}\n      <View style={{ \n        backgroundColor: theme.colors.primary,\n        paddingHorizontal: 16,\n        paddingVertical: 20,\n        paddingTop: 50\n      }}>\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <TouchableOpacity onPress={() => navigation.goBack()}>\n            <Text style={{ color: theme.colors.white, fontSize: 18, marginRight: 16 }}>←</Text>\n          </TouchableOpacity>\n          <View>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 18,\n              fontWeight: 'bold'\n            }}>\n              Produção de linha\n            </Text>\n            <Text style={{ \n              color: theme.colors.white,\n              fontSize: 16\n            }}>\n              {line.name} {line.company || 'Guaravita'}\n            </Text>\n          </View>\n        </View>\n      </View>\n\n      <ScrollView style={{ padding: 16 }}>\n        {/* Produção Ativa */}\n        {activeProductions.length > 0 && (\n          <View style={{ marginBottom: 24 }}>\n            <Text style={{ \n              fontSize: 16,\n              fontWeight: 'bold',\n              marginBottom: 12,\n              color: theme.colors.text\n            }}>\n              EM PRODUÇÃO\n            </Text>\n            {activeProductions.map((production) => (\n              <ProductionItem key={production.id} production={production} />\n            ))}\n          </View>\n        )}\n\n        {/* Produções Finalizadas */}\n        {finishedProductions.length > 0 && (\n          <View>\n            <Text style={{ \n              fontSize: 16,\n              fontWeight: 'bold',\n              marginBottom: 12,\n              color: theme.colors.text\n            }}>\n              FINALIZADAS\n            </Text>\n            {finishedProductions.map((production) => (\n              <ProductionItem key={production.id} production={production} />\n            ))}\n          </View>\n        )}\n\n        {/* Caso não tenha produções */}\n        {lineProductions.length === 0 && (\n          <View style={{ \n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            paddingTop: 100\n          }}>\n            <Text style={{ \n              fontSize: 16,\n              color: theme.colors.textSecondary,\n              textAlign: 'center'\n            }}>\n              Nenhuma produção encontrada para esta linha\n            </Text>\n          </View>\n        )}\n      </ScrollView>\n    </Container>\n  );\n};","size_bytes":5487},"src/screens/LinesScreen.tsx":{"content":"import React from 'react';\nimport { FlatList, View, Text } from 'react-native';\nimport { productionLines } from '../data/productionLines';\nimport {\n  Container,\n  Title,\n  Card,\n  StatusIndicator,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\ninterface LinesScreenProps {\n  navigation: any;\n}\n\nexport const LinesScreen: React.FC<LinesScreenProps> = ({ navigation }) => {\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'produzindo': return 'Produzindo';\n      case 'aguardando': return 'Aguardando';\n      case 'iniciando': return 'Iniciando';\n      default: return status;\n    }\n  };\n\n  return (\n    <Container style={{ padding: 16 }}>\n      <Title>Selecione uma Linha</Title>\n      \n      <View style={{ flexDirection: 'row', marginBottom: 16, alignItems: 'center' }}>\n        <StatusIndicator status=\"iniciando\" />\n        <Text style={{ marginLeft: 8, marginRight: 16 }}>Iniciando</Text>\n        <StatusIndicator status=\"aguardando\" />\n        <Text style={{ marginLeft: 8, marginRight: 16 }}>Aguardando</Text>\n        <StatusIndicator status=\"produzindo\" />\n        <Text style={{ marginLeft: 8 }}>Produzindo</Text>\n      </View>\n      \n      <FlatList\n        data={productionLines}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Card onPress={() => navigation.navigate('LineDetail', { line: item })}>\n            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <StatusIndicator status={item.status} />\n                <View style={{ marginLeft: 16 }}>\n                  <Text style={{ \n                    fontSize: 16, \n                    fontWeight: 'bold', \n                    color: theme.colors.white,\n                    backgroundColor: theme.colors.success,\n                    paddingHorizontal: 8,\n                    paddingVertical: 4,\n                    borderRadius: 4\n                  }}>\n                    {item.name}\n                  </Text>\n                  <Text style={{ fontSize: 14, marginTop: 4 }}>{item.code}</Text>\n                </View>\n              </View>\n              <Text style={{ fontSize: 16 }}>→</Text>\n            </View>\n          </Card>\n        )}\n      />\n    </Container>\n  );\n};","size_bytes":2380},"src/screens/LoginScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { Alert, Text } from 'react-native';\nimport { useAuth } from '../contexts/AuthContext';\nimport {\n  Container,\n  CenteredContainer,\n  Logo,\n  Input,\n  Button,\n  ButtonText,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\ninterface LoginScreenProps {\n  navigation: any;\n}\n\nexport const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { login } = useAuth();\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      Alert.alert('Erro', 'Por favor, preencha todos os campos');\n      return;\n    }\n\n    const success = await login(email, password);\n    if (!success) {\n      Alert.alert('Erro', 'Credenciais inválidas');\n    }\n    // Removido navigation.navigate - deixa o AppNavigator controlar automaticamente\n  };\n\n  return (\n    <Container>\n      <CenteredContainer>\n        <Logo>PCOUNT</Logo>\n        \n        <Input\n          placeholder=\"Digite seu e-mail\"\n          value={email}\n          onChangeText={setEmail}\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n        />\n        \n        <Input\n          placeholder=\"Digite sua senha\"\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry\n        />\n        \n        <Button onPress={handleLogin}>\n          <ButtonText>Entrar</ButtonText>\n        </Button>\n        \n        <Text style={{ \n          fontSize: theme.fontSizes.small,\n          color: theme.colors.textSecondary,\n          textAlign: 'center',\n          marginTop: theme.spacing.md\n        }}>\n          Usuário padrão: Admin | Senha: Admin\n        </Text>\n      </CenteredContainer>\n    </Container>\n  );\n};","size_bytes":1799},"src/screens/ProductionScreen.tsx":{"content":"import React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  Container,\n  CenteredContainer,\n  Title,\n  Button,\n  ButtonText,\n} from '../components/StyledComponents';\nimport { theme } from '../theme';\n\nexport const ProductionScreen: React.FC = () => {\n  return (\n    <Container>\n      <CenteredContainer>\n        <View style={{ alignItems: 'center' }}>\n          <Text style={{ fontSize: 24, marginBottom: 16 }}>📷</Text>\n          <Text style={{ \n            fontSize: 20, \n            fontWeight: 'bold', \n            backgroundColor: theme.colors.primary,\n            color: theme.colors.white,\n            paddingHorizontal: 12,\n            paddingVertical: 6,\n            borderRadius: 8\n          }}>\n            SCAN ME!\n          </Text>\n        </View>\n        \n        <Title>Selecione uma Produção</Title>\n        \n        <Text style={{ \n          textAlign: 'center', \n          color: theme.colors.text,\n          fontSize: 16,\n          marginBottom: 32\n        }}>\n          Não há produção aberta para o dispositivo\n        </Text>\n        \n        <Button>\n          <ButtonText>📱 Escanear QR Code</ButtonText>\n        </Button>\n      </CenteredContainer>\n    </Container>\n  );\n};","size_bytes":1229},"src/theme/index.ts":{"content":"export interface Theme {\n  colors: {\n    primary: string;\n    background: string;\n    surface: string;\n    text: string;\n    textSecondary: string;\n    border: string;\n    success: string;\n    warning: string;\n    error: string;\n    info: string;\n    white: string;\n    shadow: string;\n  };\n  fonts: {\n    regular: string;\n    medium: string;\n    bold: string;\n  };\n  fontSizes: {\n    small: number;\n    medium: number;\n    large: number;\n    xlarge: number;\n    xxlarge: number;\n  };\n  spacing: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    xxl: number;\n  };\n  borderRadius: {\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n  };\n  shadows: {\n    sm: string;\n    md: string;\n    lg: string;\n  };\n}\n\nexport const theme: Theme = {\n  colors: {\n    primary: '#007AFF',\n    background: '#FFFFFF',\n    surface: '#F2F2F7',\n    text: '#1C1C1E',\n    textSecondary: '#8E8E93',\n    border: '#E5E5EA',\n    success: '#34C759',\n    warning: '#FF9500',\n    error: '#FF3B30',\n    info: '#5AC8FA',\n    white: '#FFFFFF',\n    shadow: '#000000',\n  },\n  fonts: {\n    regular: 'System',\n    medium: 'System',\n    bold: 'System',\n  },\n  fontSizes: {\n    small: 12,\n    medium: 14,\n    large: 16,\n    xlarge: 20,\n    xxlarge: 24,\n  },\n  spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n    xxl: 48,\n  },\n  borderRadius: {\n    sm: 4,\n    md: 8,\n    lg: 12,\n    xl: 16,\n  },\n  shadows: {\n    sm: '0px 1px 2px rgba(0, 0, 0, 0.05)',\n    md: '0px 2px 8px rgba(0, 0, 0, 0.1)',\n    lg: '0px 4px 16px rgba(0, 0, 0, 0.15)',\n  },\n};","size_bytes":1575},"src/types/index.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  password: string;\n  name: string;\n  role: 'admin' | 'operator';\n}\n\nexport interface Contract {\n  id: string;\n  name: string;\n  company: string;\n}\n\nexport interface ProductionLine {\n  id: string;\n  name: string;\n  status: 'produzindo' | 'aguardando' | 'iniciando';\n  code: string;\n}\n\nexport interface Production {\n  id: string;\n  lineId: string;\n  productCode: string;\n  productName: string;\n  technician: string;\n  startDate: string;\n  endDate?: string;\n  status: 'EM PRODUCAO' | 'FINALIZADA';\n}\n\nexport interface ProductionStats {\n  operationHours: string;\n  productiveHours: string;\n  avgProduction: number;\n  totalProduced: number;\n  hourlyProduction: Array<{ hour: string; value: number }>;\n}\n\nexport interface AuthContextType {\n  isAuthenticated: boolean;\n  currentUser: User | null;\n  selectedContract: Contract | null;\n  login: (email: string, password: string) => Promise<boolean>;\n  selectContract: (contract: Contract) => void;\n  logout: () => void;\n}","size_bytes":1018}},"version":1}